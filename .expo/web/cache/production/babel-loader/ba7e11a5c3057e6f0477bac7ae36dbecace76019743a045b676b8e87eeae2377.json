{"ast":null,"code":"import{NativeModule,Platform,registerWebModule}from'expo-modules-core';import{getOrientationLockAsync,getOrientationAsync}from'./ScreenOrientation';import{Orientation,OrientationLock,WebOrientationLock,WebOrientation}from'./ScreenOrientation.types';const OrientationLockAPIToWeb={[OrientationLock.DEFAULT]:WebOrientationLock.NATURAL,[OrientationLock.ALL]:WebOrientationLock.ANY,[OrientationLock.PORTRAIT]:WebOrientationLock.PORTRAIT,[OrientationLock.PORTRAIT_UP]:WebOrientationLock.PORTRAIT_PRIMARY,[OrientationLock.PORTRAIT_DOWN]:WebOrientationLock.PORTRAIT_SECONDARY,[OrientationLock.LANDSCAPE]:WebOrientationLock.LANDSCAPE,[OrientationLock.LANDSCAPE_LEFT]:WebOrientationLock.LANDSCAPE_PRIMARY,[OrientationLock.LANDSCAPE_RIGHT]:WebOrientationLock.LANDSCAPE_SECONDARY};const OrientationWebToAPI={[WebOrientation.PORTRAIT_PRIMARY]:Orientation.PORTRAIT_UP,[WebOrientation.PORTRAIT_SECONDARY]:Orientation.PORTRAIT_DOWN,[WebOrientation.LANDSCAPE_PRIMARY]:Orientation.LANDSCAPE_LEFT,[WebOrientation.LANDSCAPE_SECONDARY]:Orientation.LANDSCAPE_RIGHT};const screen=Platform.canUseViewport?window.screen:{};function _convertToLegacyOrientationLock(orientationLock){switch(orientationLock){case WebOrientationLock.UNKNOWN:throw new Error(`expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`);case WebOrientationLock.ANY:return['portrait','landscape'];case WebOrientationLock.NATURAL:return'default';default:return orientationLock;}}async function _lockAsync(webOrientationLock){if(webOrientationLock===WebOrientationLock.UNKNOWN){throw new Error(`expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`);}if(screen.orientation&&screen.orientation.lock){await screen.orientation.lock(webOrientationLock);}else if(screen['lockOrientation']||screen['mozLockOrientation']||screen['msLockOrientation']){const legacyLock=_convertToLegacyOrientationLock(webOrientationLock);const lockOrientation=screen['lockOrientation']||screen['mozLockOrientation']||screen['msLockOrientation'];const isSuccess=lockOrientation.call(screen,legacyLock);if(!isSuccess){throw new Error(`Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`);}}else{throw new Error(`expo-screen-orientation: The browser doesn't support locking screen orientation.`);}}let _lastWebOrientationLock=WebOrientationLock.UNKNOWN;class ExpoScreenOrientation extends NativeModule{orientation=Platform.canUseViewport?screen.orientation||screen.msOrientation||null:null;async emitOrientationEvent(){const[orientationLock,orientation]=await Promise.all([getOrientationLockAsync(),getOrientationAsync()]);this.emit('expoDidUpdateDimensions',{orientationLock,orientationInfo:{orientation}});}startObserving(){this.listener=()=>this.emitOrientationEvent();if(Platform.canUseEventListeners){if(this.orientation&&this.orientation.addEventListener){this.orientation.addEventListener('change',this.listener);}else{window.addEventListener('orientationchange',this.listener);}}}stopObserving(){if(Platform.canUseEventListeners){if(this.orientation&&this.orientation.removeEventListener){this.orientation.removeEventListener('change',this.listener);}else{window.removeEventListener('orientationchange',this.listener);}}}async supportsOrientationLockAsync(orientationLock){return orientationLock in OrientationLockAPIToWeb;}async getPlatformOrientationLockAsync(){return _lastWebOrientationLock;}async getOrientationAsync(){const webOrientation=screen['msOrientation']||(screen.orientation||screen['mozOrientation']||{}).type;if(!webOrientation){return Orientation.UNKNOWN;}return OrientationWebToAPI[webOrientation];}async lockAsync(orientationLock){const webOrientationLock=OrientationLockAPIToWeb[orientationLock];if(!webOrientationLock){throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);}await _lockAsync(webOrientationLock);}async lockPlatformAsync(webOrientationLock){await _lockAsync(webOrientationLock);_lastWebOrientationLock=webOrientationLock;}async unlockAsync(){if(screen.orientation&&screen.orientation.unlock){screen.orientation.unlock();}else if(screen['unlockOrientation']||screen['mozUnlockOrientation']||screen['msUnlockOrientation']){const unlockOrientation=screen['unlockOrientation']||screen['mozUnlockOrientation']||screen['msUnlockOrientation'];const isSuccess=unlockOrientation.call(screen);if(!isSuccess){throw new Error(`Unlocking screen orientation on device was denied`);}}else{throw new Error(`expo-screen-orientation: The browser doesn't support unlocking screen orientation.`);}}}export default registerWebModule(ExpoScreenOrientation);","map":{"version":3,"names":["NativeModule","Platform","registerWebModule","getOrientationLockAsync","getOrientationAsync","Orientation","OrientationLock","WebOrientationLock","WebOrientation","OrientationLockAPIToWeb","DEFAULT","NATURAL","ALL","ANY","PORTRAIT","PORTRAIT_UP","PORTRAIT_PRIMARY","PORTRAIT_DOWN","PORTRAIT_SECONDARY","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_PRIMARY","LANDSCAPE_RIGHT","LANDSCAPE_SECONDARY","OrientationWebToAPI","screen","canUseViewport","window","_convertToLegacyOrientationLock","orientationLock","UNKNOWN","Error","_lockAsync","webOrientationLock","orientation","lock","legacyLock","lockOrientation","isSuccess","call","JSON","stringify","_lastWebOrientationLock","ExpoScreenOrientation","msOrientation","emitOrientationEvent","Promise","all","emit","orientationInfo","startObserving","listener","canUseEventListeners","addEventListener","stopObserving","removeEventListener","supportsOrientationLockAsync","getPlatformOrientationLockAsync","webOrientation","type","lockAsync","TypeError","lockPlatformAsync","unlockAsync","unlock","unlockOrientation"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-screen-orientation/src/ExpoScreenOrientation.web.ts"],"sourcesContent":["import { NativeModule, Platform, registerWebModule } from 'expo-modules-core';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\nimport {\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n  ExpoOrientationEvents,\n} from './ScreenOrientation.types';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  [OrientationLock.DEFAULT]: WebOrientationLock.NATURAL,\n  [OrientationLock.ALL]: WebOrientationLock.ANY,\n  [OrientationLock.PORTRAIT]: WebOrientationLock.PORTRAIT,\n  [OrientationLock.PORTRAIT_UP]: WebOrientationLock.PORTRAIT_PRIMARY,\n  [OrientationLock.PORTRAIT_DOWN]: WebOrientationLock.PORTRAIT_SECONDARY,\n  [OrientationLock.LANDSCAPE]: WebOrientationLock.LANDSCAPE,\n  [OrientationLock.LANDSCAPE_LEFT]: WebOrientationLock.LANDSCAPE_PRIMARY,\n  [OrientationLock.LANDSCAPE_RIGHT]: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst screen: Screen = Platform.canUseViewport ? window.screen : ({} as Screen);\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  // @ts-ignore-error: This is missing in the TypeScript definitions\n  if (screen.orientation && screen.orientation.lock) {\n    // @ts-ignore-error\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nclass ExpoScreenOrientation extends NativeModule<ExpoOrientationEvents> {\n  orientation: ScreenOrientation | null = Platform.canUseViewport\n    ? screen.orientation || (screen as any).msOrientation || null\n    : null;\n  async emitOrientationEvent() {\n    const [orientationLock, orientation] = await Promise.all([\n      getOrientationLockAsync(),\n      getOrientationAsync(),\n    ]);\n    this.emit('expoDidUpdateDimensions', {\n      orientationLock,\n      orientationInfo: { orientation },\n    });\n  }\n  startObserving() {\n    this.listener = () => this.emitOrientationEvent();\n    if (Platform.canUseEventListeners) {\n      if (this.orientation && this.orientation.addEventListener) {\n        this.orientation.addEventListener('change', this.listener);\n      } else {\n        window.addEventListener('orientationchange', this.listener);\n      }\n    }\n  }\n  stopObserving(): void {\n    if (Platform.canUseEventListeners) {\n      if (this.orientation && this.orientation.removeEventListener) {\n        this.orientation.removeEventListener('change', this.listener);\n      } else {\n        window.removeEventListener('orientationchange', this.listener);\n      }\n    }\n  }\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  }\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  }\n  async getOrientationAsync(): Promise<Orientation> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return Orientation.UNKNOWN;\n    }\n    return OrientationWebToAPI[webOrientation];\n  }\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  }\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  }\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  }\n}\n\nexport default registerWebModule(ExpoScreenOrientation);\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
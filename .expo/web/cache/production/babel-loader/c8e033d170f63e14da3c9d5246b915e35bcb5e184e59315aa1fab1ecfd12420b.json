{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{useFonts}from'expo-font';import{ClockSettingsContext}from'../contexts/ClockSettingsContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TimeDisplay=({timeScale=0.21,blinkInterval=500,style})=>{const{clockOpacity,clockColor}=useContext(ClockSettingsContext);const[currentTime,setCurrentTime]=useState(new Date());const[colonVisible,setColonVisible]=useState(true);const[fontsLoaded]=useFonts({'DSEG7Classic-Bold':require('../../assets/fonts/DSEG7Classic-Bold.ttf')});useEffect(()=>{const timer=setInterval(()=>{setCurrentTime(new Date());},1000);return()=>clearInterval(timer);},[]);useEffect(()=>{const blinkTimer=setInterval(()=>{setColonVisible(prev=>!prev);},blinkInterval);return()=>clearInterval(blinkTimer);},[blinkInterval]);const{width}=useWindowDimensions();const fontSize=width*timeScale;const minWidth=fontSize*5;const hours=currentTime.getHours();const minutes=currentTime.getMinutes();const formattedHours=hours<10?`0${hours}`:`${hours}`;const formattedMinutes=minutes<10?`0${minutes}`:`${minutes}`;if(!fontsLoaded){return _jsx(Text,{children:\"Loading...\"});}return _jsx(View,{style:[styles.container,style,{minWidth,flexDirection:'row',alignItems:'center'}],children:_jsxs(Text,{numberOfLines:1,style:[styles.timeText,{fontSize,color:clockColor,opacity:clockOpacity,textAlign:'left'}],children:[formattedHours,_jsx(Text,{style:{color:colonVisible?clockColor:'transparent'},children:\":\"}),formattedMinutes]})});};const styles=StyleSheet.create({container:{justifyContent:'center',alignItems:'flex-start'},timeText:{fontFamily:'DSEG7Classic-Bold',textAlign:'left'}});export default TimeDisplay;","map":{"version":3,"names":["React","useState","useEffect","useContext","View","Text","StyleSheet","useWindowDimensions","useFonts","ClockSettingsContext","jsx","_jsx","jsxs","_jsxs","TimeDisplay","timeScale","blinkInterval","style","clockOpacity","clockColor","currentTime","setCurrentTime","Date","colonVisible","setColonVisible","fontsLoaded","require","timer","setInterval","clearInterval","blinkTimer","prev","width","fontSize","minWidth","hours","getHours","minutes","getMinutes","formattedHours","formattedMinutes","children","styles","container","flexDirection","alignItems","numberOfLines","timeText","color","opacity","textAlign","create","justifyContent","fontFamily"],"sources":["/home/orr/GitHub/Dabbetul-Arz/src/components/TimeDisplay.js"],"sourcesContent":["/**\n * TimeDisplay\n * Компонент для отображения времени в формате HH:MM с мигающим двоеточием.\n *\n * @param {Object} props\n * @param {number} [props.timeScale=0.21] - коэффициент для расчёта размера шрифта времени относительно ширины экрана.\n * @param {number} [props.blinkInterval=500] - интервал мигания двоеточия в миллисекундах.\n * @param {string} [props.textColor='#00FF00'] - цвет текста.\n * @param {Object} [props.style] - дополнительные стили для контейнера.\n * @returns {JSX.Element} Элемент времени.\n */\nimport React, { useState, useEffect, useContext } from 'react';\nimport { View, Text, StyleSheet, useWindowDimensions } from 'react-native';\nimport { useFonts } from 'expo-font';\nimport { ClockSettingsContext } from '../contexts/ClockSettingsContext';\n\nconst TimeDisplay = ({ timeScale = 0.21, blinkInterval = 500, style }) => {\n  const { clockOpacity, clockColor } = useContext(ClockSettingsContext);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [colonVisible, setColonVisible] = useState(true);\n\n  const [fontsLoaded] = useFonts({\n    'DSEG7Classic-Bold': require('../../assets/fonts/DSEG7Classic-Bold.ttf'),\n  });\n  \n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  \n  useEffect(() => {\n    const blinkTimer = setInterval(() => {\n      setColonVisible(prev => !prev);\n    }, blinkInterval);\n    return () => clearInterval(blinkTimer);\n  }, [blinkInterval]);\n  \n  const { width } = useWindowDimensions();\n  const fontSize = width * timeScale;\n  const minWidth = fontSize * 5; // обеспечиваем, что в одной строке поместится формат HH:MM (5 символов)\n  \n  const hours = currentTime.getHours();\n  const minutes = currentTime.getMinutes();\n  const formattedHours = hours < 10 ? `0${hours}` : `${hours}`;\n  const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n  \n  if (!fontsLoaded) {\n    return <Text>Loading...</Text>;\n  }\n\n  return (\n    <View style={[styles.container, style, { minWidth, flexDirection: 'row', alignItems: 'center' }]}>\n      <Text\n        numberOfLines={1}\n        style={[styles.timeText, { fontSize, color: clockColor, opacity: clockOpacity, textAlign: 'left' }]}\n      >\n        {formattedHours}\n        <Text style={{ color: colonVisible ? clockColor : 'transparent' }}>:</Text>\n        {formattedMinutes}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    // По умолчанию выравнивание оставляем левым\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n  },\n  timeText: {\n    fontFamily: 'DSEG7Classic-Bold',\n    textAlign: 'left',\n  },\n});\n\nexport default TimeDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useEffect,useRef,forwardRef,useImperativeHandle}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{getSourceUri}from'./VideoPlayer.web';import{jsx as _jsx}from\"react/jsx-runtime\";function createAudioContext(){return true?new window.AudioContext():null;}function createZeroGainNode(audioContext){const zeroGainNode=audioContext?.createGain()??null;if(audioContext&&zeroGainNode){zeroGainNode.gain.value=0;zeroGainNode.connect(audioContext.destination);}return zeroGainNode;}function mapStyles(style){const flattenedStyles=StyleSheet.flatten(style);return flattenedStyles;}export function isPictureInPictureSupported(){return typeof document==='object'&&typeof document.exitPictureInPicture==='function';}export const VideoView=forwardRef((props,ref)=>{const videoRef=useRef(null);const mediaNodeRef=useRef(null);const hasToSetupAudioContext=useRef(false);const fullscreenChangeListener=useRef(null);const audioContextRef=useRef(null);const zeroGainNodeRef=useRef(null);useImperativeHandle(ref,()=>({enterFullscreen:async()=>{if(!props.allowsFullscreen){return;}await videoRef.current?.requestFullscreen();},exitFullscreen:async()=>{await document.exitFullscreen();},startPictureInPicture:async()=>{await videoRef.current?.requestPictureInPicture();},stopPictureInPicture:async()=>{try{await document.exitPictureInPicture();}catch(e){if(e instanceof DOMException&&e.name==='InvalidStateError'){console.warn('The VideoView is not in Picture-in-Picture mode.');}else{throw e;}}}}));useEffect(()=>{const onEnter=()=>{props.onPictureInPictureStart?.();};const onLeave=()=>{props.onPictureInPictureStop?.();};videoRef.current?.addEventListener('enterpictureinpicture',onEnter);videoRef.current?.addEventListener('leavepictureinpicture',onLeave);return()=>{videoRef.current?.removeEventListener('enterpictureinpicture',onEnter);videoRef.current?.removeEventListener('leavepictureinpicture',onLeave);};},[videoRef,props.onPictureInPictureStop,props.onPictureInPictureStart]);function attachAudioNodes(){const audioContext=audioContextRef.current;const zeroGainNode=zeroGainNodeRef.current;const mediaNode=mediaNodeRef.current;if(audioContext&&zeroGainNode&&mediaNode){props.player.mountAudioNode(audioContext,zeroGainNode,mediaNode);}else{console.warn(\"Couldn't mount audio node, this might affect the audio playback when using multiple video views with the same player.\");}}function detachAudioNodes(){const audioContext=audioContextRef.current;const mediaNode=mediaNodeRef.current;if(audioContext&&mediaNode&&videoRef.current){props.player.unmountAudioNode(videoRef.current,audioContext,mediaNode);}}function maybeSetupAudioContext(){if(!hasToSetupAudioContext.current||!navigator.userActivation.hasBeenActive||!videoRef.current){return;}const audioContext=createAudioContext();detachAudioNodes();audioContextRef.current=audioContext;zeroGainNodeRef.current=createZeroGainNode(audioContextRef.current);mediaNodeRef.current=audioContext?audioContext.createMediaElementSource(videoRef.current):null;attachAudioNodes();hasToSetupAudioContext.current=false;}function fullscreenListener(){if(document.fullscreenElement===videoRef.current){props.onFullscreenEnter?.();}else{props.onFullscreenExit?.();}}function setupFullscreenListener(){fullscreenChangeListener.current=fullscreenListener;videoRef.current?.addEventListener('fullscreenchange',fullscreenChangeListener.current);}function cleanupFullscreenListener(){if(fullscreenChangeListener.current){videoRef.current?.removeEventListener('fullscreenchange',fullscreenChangeListener.current);fullscreenChangeListener.current=null;}}useEffect(()=>{if(videoRef.current){props.player?.mountVideoView(videoRef.current);}setupFullscreenListener();attachAudioNodes();return()=>{if(videoRef.current){props.player?.unmountVideoView(videoRef.current);}cleanupFullscreenListener();detachAudioNodes();};},[props.player]);return _jsx(\"video\",{controls:props.nativeControls??true,controlsList:props.allowsFullscreen?undefined:'nofullscreen',crossOrigin:\"anonymous\",style:Object.assign({},mapStyles(props.style),{objectFit:props.contentFit}),onPlay:()=>{maybeSetupAudioContext();},onVolumeChange:()=>{maybeSetupAudioContext();},ref:newRef=>{if(newRef&&!newRef.isEqualNode(videoRef.current)){videoRef.current=newRef;hasToSetupAudioContext.current=true;maybeSetupAudioContext();}},disablePictureInPicture:!props.allowsPictureInPicture,src:getSourceUri(props.player?.src)??''});});export default VideoView;","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useImperativeHandle","StyleSheet","getSourceUri","jsx","_jsx","createAudioContext","window","AudioContext","createZeroGainNode","audioContext","zeroGainNode","createGain","gain","value","connect","destination","mapStyles","style","flattenedStyles","flatten","isPictureInPictureSupported","document","exitPictureInPicture","VideoView","props","ref","videoRef","mediaNodeRef","hasToSetupAudioContext","fullscreenChangeListener","audioContextRef","zeroGainNodeRef","enterFullscreen","allowsFullscreen","current","requestFullscreen","exitFullscreen","startPictureInPicture","requestPictureInPicture","stopPictureInPicture","e","DOMException","name","console","warn","onEnter","onPictureInPictureStart","onLeave","onPictureInPictureStop","addEventListener","removeEventListener","attachAudioNodes","mediaNode","player","mountAudioNode","detachAudioNodes","unmountAudioNode","maybeSetupAudioContext","navigator","userActivation","hasBeenActive","createMediaElementSource","fullscreenListener","fullscreenElement","onFullscreenEnter","onFullscreenExit","setupFullscreenListener","cleanupFullscreenListener","mountVideoView","unmountVideoView","controls","nativeControls","controlsList","undefined","crossOrigin","Object","assign","objectFit","contentFit","onPlay","onVolumeChange","newRef","isEqualNode","disablePictureInPicture","allowsPictureInPicture","src"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-video/src/VideoView.web.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport VideoPlayer, { getSourceUri } from './VideoPlayer.web';\nimport type { VideoViewProps } from './VideoView.types';\n\nfunction createAudioContext(): AudioContext | null {\n  return typeof window !== 'undefined' ? new window.AudioContext() : null;\n}\n\nfunction createZeroGainNode(audioContext: AudioContext | null): GainNode | null {\n  const zeroGainNode = audioContext?.createGain() ?? null;\n\n  if (audioContext && zeroGainNode) {\n    zeroGainNode.gain.value = 0;\n    zeroGainNode.connect(audioContext.destination);\n  }\n  return zeroGainNode;\n}\n\nfunction mapStyles(style: VideoViewProps['style']): React.CSSProperties {\n  const flattenedStyles = StyleSheet.flatten(style);\n  // Looking through react-native-web source code they also just pass styles directly without further conversions, so it's just a cast.\n  return flattenedStyles as React.CSSProperties;\n}\n\nexport function isPictureInPictureSupported(): boolean {\n  return typeof document === 'object' && typeof document.exitPictureInPicture === 'function';\n}\n\nexport const VideoView = forwardRef((props: { player?: VideoPlayer } & VideoViewProps, ref) => {\n  const videoRef = useRef<null | HTMLVideoElement>(null);\n  const mediaNodeRef = useRef<null | MediaElementAudioSourceNode>(null);\n  const hasToSetupAudioContext = useRef(false);\n  const fullscreenChangeListener = useRef<null | (() => void)>(null);\n\n  /**\n   * Audio context is used to mute all but one video when multiple video views are playing from one player simultaneously.\n   * Using audio context nodes allows muting videos without displaying the mute icon in the video player.\n   * We have to keep the context that called createMediaElementSource(videoRef), as the method can't be called\n   * for the second time with another context and there is no way to unbind the video and audio context afterward.\n   */\n  const audioContextRef = useRef<null | AudioContext>(null);\n  const zeroGainNodeRef = useRef<null | GainNode>(null);\n\n  useImperativeHandle(ref, () => ({\n    enterFullscreen: async () => {\n      if (!props.allowsFullscreen) {\n        return;\n      }\n      await videoRef.current?.requestFullscreen();\n    },\n    exitFullscreen: async () => {\n      await document.exitFullscreen();\n    },\n    startPictureInPicture: async () => {\n      await videoRef.current?.requestPictureInPicture();\n    },\n    stopPictureInPicture: async () => {\n      try {\n        await document.exitPictureInPicture();\n      } catch (e) {\n        if (e instanceof DOMException && e.name === 'InvalidStateError') {\n          console.warn('The VideoView is not in Picture-in-Picture mode.');\n        } else {\n          throw e;\n        }\n      }\n    },\n  }));\n\n  useEffect(() => {\n    const onEnter = () => {\n      props.onPictureInPictureStart?.();\n    };\n    const onLeave = () => {\n      props.onPictureInPictureStop?.();\n    };\n    videoRef.current?.addEventListener('enterpictureinpicture', onEnter);\n    videoRef.current?.addEventListener('leavepictureinpicture', onLeave);\n\n    return () => {\n      videoRef.current?.removeEventListener('enterpictureinpicture', onEnter);\n      videoRef.current?.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [videoRef, props.onPictureInPictureStop, props.onPictureInPictureStart]);\n\n  // Adds the video view as a candidate for being the audio source for the player (when multiple views play from one\n  // player only one will emit audio).\n  function attachAudioNodes() {\n    const audioContext = audioContextRef.current;\n    const zeroGainNode = zeroGainNodeRef.current;\n    const mediaNode = mediaNodeRef.current;\n\n    if (audioContext && zeroGainNode && mediaNode) {\n      props.player.mountAudioNode(audioContext, zeroGainNode, mediaNode);\n    } else {\n      console.warn(\n        \"Couldn't mount audio node, this might affect the audio playback when using multiple video views with the same player.\"\n      );\n    }\n  }\n\n  function detachAudioNodes() {\n    const audioContext = audioContextRef.current;\n    const mediaNode = mediaNodeRef.current;\n    if (audioContext && mediaNode && videoRef.current) {\n      props.player.unmountAudioNode(videoRef.current, audioContext, mediaNode);\n    }\n  }\n\n  function maybeSetupAudioContext() {\n    if (\n      !hasToSetupAudioContext.current ||\n      !navigator.userActivation.hasBeenActive ||\n      !videoRef.current\n    ) {\n      return;\n    }\n    const audioContext = createAudioContext();\n\n    detachAudioNodes();\n    audioContextRef.current = audioContext;\n    zeroGainNodeRef.current = createZeroGainNode(audioContextRef.current);\n    mediaNodeRef.current = audioContext\n      ? audioContext.createMediaElementSource(videoRef.current)\n      : null;\n    attachAudioNodes();\n    hasToSetupAudioContext.current = false;\n  }\n\n  function fullscreenListener() {\n    if (document.fullscreenElement === videoRef.current) {\n      props.onFullscreenEnter?.();\n    } else {\n      props.onFullscreenExit?.();\n    }\n  }\n\n  function setupFullscreenListener() {\n    fullscreenChangeListener.current = fullscreenListener;\n    videoRef.current?.addEventListener('fullscreenchange', fullscreenChangeListener.current);\n  }\n\n  function cleanupFullscreenListener() {\n    if (fullscreenChangeListener.current) {\n      videoRef.current?.removeEventListener('fullscreenchange', fullscreenChangeListener.current);\n      fullscreenChangeListener.current = null;\n    }\n  }\n\n  useEffect(() => {\n    if (videoRef.current) {\n      props.player?.mountVideoView(videoRef.current);\n    }\n    setupFullscreenListener();\n    attachAudioNodes();\n\n    return () => {\n      if (videoRef.current) {\n        props.player?.unmountVideoView(videoRef.current);\n      }\n      cleanupFullscreenListener();\n      detachAudioNodes();\n    };\n  }, [props.player]);\n\n  return (\n    <video\n      controls={props.nativeControls ?? true}\n      controlsList={props.allowsFullscreen ? undefined : 'nofullscreen'}\n      crossOrigin=\"anonymous\"\n      style={{\n        ...mapStyles(props.style),\n        objectFit: props.contentFit,\n      }}\n      onPlay={() => {\n        maybeSetupAudioContext();\n      }}\n      // The player can autoplay when muted, unmuting by a user should create the audio context\n      onVolumeChange={() => {\n        maybeSetupAudioContext();\n      }}\n      ref={(newRef) => {\n        // This is called with a null value before `player.unmountVideoView` is called,\n        // we can't assign null to videoRef if we want to unmount it from the player.\n        if (newRef && !newRef.isEqualNode(videoRef.current)) {\n          videoRef.current = newRef;\n          hasToSetupAudioContext.current = true;\n          maybeSetupAudioContext();\n        }\n      }}\n      disablePictureInPicture={!props.allowsPictureInPicture}\n      src={getSourceUri(props.player?.src) ?? ''}\n    />\n  );\n});\n\nexport default VideoView;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
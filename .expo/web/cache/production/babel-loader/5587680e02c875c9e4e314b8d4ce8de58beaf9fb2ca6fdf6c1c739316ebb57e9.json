{"ast":null,"code":"import{useMemo}from'react';import resolveAssetSource from'./resolveAssetSource';export function useVideoPlayer(source,setup){const parsedSource=typeof source==='string'?{uri:source}:source;return useMemo(()=>{const player=new VideoPlayerWeb(parsedSource);setup?.(player);return player;},[JSON.stringify(source)]);}export function getSourceUri(source){if(typeof source==='string'){return source;}if(typeof source==='number'){return resolveAssetSource(source)?.uri??null;}if(typeof source?.assetId==='number'&&!source?.uri){return resolveAssetSource(source.assetId)?.uri??null;}return source?.uri??null;}export function createVideoPlayer(source){const parsedSource=typeof source==='string'?{uri:source}:source;return new VideoPlayerWeb(parsedSource);}export default class VideoPlayerWeb extends globalThis.expo.SharedObject{constructor(source){super();this.src=source;}src=null;previousSrc=null;_mountedVideos=new Set();_audioNodes=new Set();playing=false;_muted=false;_volume=1;_loop=false;_playbackRate=1.0;_preservesPitch=true;_status='idle';_error=null;_timeUpdateLoop=null;_timeUpdateEventInterval=0;audioMixingMode='auto';allowsExternalPlayback=false;staysActiveInBackground=false;showNowPlayingNotification=false;currentLiveTimestamp=null;currentOffsetFromLive=null;targetOffsetFromLive=0;bufferOptions={};subtitleTrack=null;availableSubtitleTracks=[];set muted(value){this._mountedVideos.forEach(video=>{video.muted=value;});this._muted=value;}get muted(){return this._muted;}set playbackRate(value){this._mountedVideos.forEach(video=>{video.playbackRate=value;});}get playbackRate(){return this._playbackRate;}get isLive(){return[...this._mountedVideos][0]?.duration===Infinity;}set volume(value){this._mountedVideos.forEach(video=>{video.volume=value;});this._volume=value;}get volume(){return this._volume;}set loop(value){this._mountedVideos.forEach(video=>{video.loop=value;});this._loop=value;}get loop(){return this._loop;}get currentTime(){return[...this._mountedVideos][0]?.currentTime??0;}set currentTime(value){this._mountedVideos.forEach(video=>{video.currentTime=value;});}get duration(){return[...this._mountedVideos][0]?.duration??0;}get preservesPitch(){return this._preservesPitch;}set preservesPitch(value){this._mountedVideos.forEach(video=>{video.preservesPitch=value;});this._preservesPitch=value;}get timeUpdateEventInterval(){return this._timeUpdateEventInterval;}set timeUpdateEventInterval(value){this._timeUpdateEventInterval=value;if(this._timeUpdateLoop){clearInterval(this._timeUpdateLoop);}if(value>0){this.emit('timeUpdate',{currentTime:this.currentTime,currentLiveTimestamp:null,currentOffsetFromLive:null,bufferedPosition:this.bufferedPosition});this._timeUpdateLoop=setInterval(()=>{this.emit('timeUpdate',{currentTime:this.currentTime,currentLiveTimestamp:null,currentOffsetFromLive:null,bufferedPosition:this.bufferedPosition});},value*1000);}}get status(){return this._status;}get bufferedPosition(){if(this._mountedVideos.size===0||this.status==='error'){return-1;}const buffered=[...this._mountedVideos][0]?.buffered;for(let i=0;i<buffered.length;i++){if(buffered.start(i)<=this.currentTime&&buffered.end(i)>=this.currentTime){return buffered.end(i);}}return 0;}set status(value){if(this._status===value)return;if(value==='error'&&this._error){this.emit('statusChange',{status:value,oldStatus:this._status,error:this._error});}else{this.emit('statusChange',{status:value,oldStatus:this._status});this._error=null;}this._status=value;}mountVideoView(video){if(this._mountedVideos.size===0){video.preservesPitch=this._preservesPitch;video.loop=this._loop;video.volume=this._volume;video.muted=this._muted;video.playbackRate=this._playbackRate;}this._mountedVideos.add(video);this._addListeners(video);this._synchronizeWithFirstVideo(video);}unmountVideoView(video){this._mountedVideos.delete(video);}mountAudioNode(audioContext,zeroGainNode,audioSourceNode){if(!audioContext||!zeroGainNode)return;this._audioNodes.add(audioSourceNode);if(this._audioNodes.size===1){audioSourceNode.connect(audioContext.destination);}else{audioSourceNode.connect(zeroGainNode);}}unmountAudioNode(video,audioContext,audioSourceNode){const mountedVideos=[...this._mountedVideos];const videoPlayingAudio=mountedVideos[0];this._audioNodes.delete(audioSourceNode);audioSourceNode.disconnect();if(videoPlayingAudio===video&&this._audioNodes.size>0&&audioContext){const newMainAudioSource=[...this._audioNodes][0];newMainAudioSource.disconnect();newMainAudioSource.connect(audioContext.destination);}}play(){this._mountedVideos.forEach(video=>{video.play();});}pause(){this._mountedVideos.forEach(video=>{video.pause();});}replace(source){this._mountedVideos.forEach(video=>{const uri=getSourceUri(source);video.pause();if(uri){video.setAttribute('src',uri);video.load();video.play();}else{video.removeAttribute('src');video.load();}});this.previousSrc=this.src;this.src=source;this.playing=true;}seekBy(seconds){this._mountedVideos.forEach(video=>{video.currentTime+=seconds;});}replay(){this._mountedVideos.forEach(video=>{video.currentTime=0;video.play();});this.playing=true;}generateThumbnailsAsync(times){throw new Error('Generating video thumbnails is not supported on Web yet');}_synchronizeWithFirstVideo(video){const firstVideo=[...this._mountedVideos][0];if(!firstVideo)return;if(firstVideo.paused){video.pause();}else{video.play();}video.currentTime=firstVideo.currentTime;video.volume=firstVideo.volume;video.muted=firstVideo.muted;video.playbackRate=firstVideo.playbackRate;}_emitOnce(eventSource,eventName,...args){const mountedVideos=[...this._mountedVideos];if(mountedVideos[0]===eventSource){this.emit(eventName,...args);}}_addListeners(video){video.onplay=()=>{this._emitOnce(video,'playingChange',{isPlaying:true,oldIsPlaying:this.playing});this.playing=true;this._mountedVideos.forEach(mountedVideo=>{mountedVideo.play();});};video.onpause=()=>{this._emitOnce(video,'playingChange',{isPlaying:false,oldIsPlaying:this.playing});this.playing=false;this._mountedVideos.forEach(mountedVideo=>{mountedVideo.pause();});};video.onvolumechange=()=>{this._emitOnce(video,'volumeChange',{volume:video.volume,oldVolume:this.volume});this._emitOnce(video,'mutedChange',{muted:video.muted,oldMuted:this.muted});this.volume=video.volume;this.muted=video.muted;};video.onseeking=()=>{this._mountedVideos.forEach(mountedVideo=>{if(mountedVideo===video||mountedVideo.currentTime===video.currentTime)return;mountedVideo.currentTime=video.currentTime;});};video.onseeked=()=>{this._mountedVideos.forEach(mountedVideo=>{if(mountedVideo===video||mountedVideo.currentTime===video.currentTime)return;mountedVideo.currentTime=video.currentTime;});};video.onratechange=()=>{this._emitOnce(video,'playbackRateChange',{playbackRate:video.playbackRate,oldPlaybackRate:this.playbackRate});this._mountedVideos.forEach(mountedVideo=>{if(mountedVideo.playbackRate===video.playbackRate)return;this._playbackRate=video.playbackRate;mountedVideo.playbackRate=video.playbackRate;});this._playbackRate=video.playbackRate;};video.onerror=()=>{this._error={message:video.error?.message??'Unknown player error'};this.status='error';};video.oncanplay=()=>{const allCanPlay=[...this._mountedVideos].reduce((previousValue,video)=>{return previousValue&&video.readyState>=3;},true);if(!allCanPlay)return;this.status='readyToPlay';};video.onwaiting=()=>{if(this._status==='loading')return;this.status='loading';};video.onended=()=>{this._emitOnce(video,'playToEnd');};video.onloadstart=()=>{this._emitOnce(video,'sourceChange',{source:this.src,oldSource:this.previousSrc});};}}","map":{"version":3,"names":["useMemo","resolveAssetSource","useVideoPlayer","source","setup","parsedSource","uri","player","VideoPlayerWeb","JSON","stringify","getSourceUri","assetId","createVideoPlayer","globalThis","expo","SharedObject","constructor","src","previousSrc","_mountedVideos","Set","_audioNodes","playing","_muted","_volume","_loop","_playbackRate","_preservesPitch","_status","_error","_timeUpdateLoop","_timeUpdateEventInterval","audioMixingMode","allowsExternalPlayback","staysActiveInBackground","showNowPlayingNotification","currentLiveTimestamp","currentOffsetFromLive","targetOffsetFromLive","bufferOptions","subtitleTrack","availableSubtitleTracks","muted","value","forEach","video","playbackRate","isLive","duration","Infinity","volume","loop","currentTime","preservesPitch","timeUpdateEventInterval","clearInterval","emit","bufferedPosition","setInterval","status","size","buffered","i","length","start","end","oldStatus","error","mountVideoView","add","_addListeners","_synchronizeWithFirstVideo","unmountVideoView","delete","mountAudioNode","audioContext","zeroGainNode","audioSourceNode","connect","destination","unmountAudioNode","mountedVideos","videoPlayingAudio","disconnect","newMainAudioSource","play","pause","replace","setAttribute","load","removeAttribute","seekBy","seconds","replay","generateThumbnailsAsync","times","Error","firstVideo","paused","_emitOnce","eventSource","eventName","args","onplay","isPlaying","oldIsPlaying","mountedVideo","onpause","onvolumechange","oldVolume","oldMuted","onseeking","onseeked","onratechange","oldPlaybackRate","onerror","message","oncanplay","allCanPlay","reduce","previousValue","readyState","onwaiting","onended","onloadstart","oldSource"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-video/src/VideoPlayer.web.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\nimport type {\n  BufferOptions,\n  PlayerError,\n  VideoPlayerStatus,\n  VideoSource,\n  VideoPlayer,\n  SubtitleTrack,\n  AudioMixingMode,\n} from './VideoPlayer.types';\nimport type { VideoPlayerEvents } from './VideoPlayerEvents.types';\nimport { VideoThumbnail } from './VideoThumbnail';\nimport resolveAssetSource from './resolveAssetSource';\n\nexport function useVideoPlayer(\n  source: VideoSource,\n  setup?: (player: VideoPlayer) => void\n): VideoPlayer {\n  const parsedSource = typeof source === 'string' ? { uri: source } : source;\n\n  return useMemo(() => {\n    const player = new VideoPlayerWeb(parsedSource);\n    setup?.(player);\n    return player;\n  }, [JSON.stringify(source)]);\n}\n\nexport function getSourceUri(source: VideoSource): string | null {\n  if (typeof source === 'string') {\n    return source;\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source)?.uri ?? null;\n  }\n  if (typeof source?.assetId === 'number' && !source?.uri) {\n    return resolveAssetSource(source.assetId)?.uri ?? null;\n  }\n\n  return source?.uri ?? null;\n}\n\nexport function createVideoPlayer(source: VideoSource): VideoPlayer {\n  const parsedSource = typeof source === 'string' ? { uri: source } : source;\n\n  return new VideoPlayerWeb(parsedSource);\n}\n\nexport default class VideoPlayerWeb\n  extends globalThis.expo.SharedObject<VideoPlayerEvents>\n  implements VideoPlayer\n{\n  constructor(source: VideoSource) {\n    super();\n    this.src = source;\n  }\n\n  src: VideoSource = null;\n  previousSrc: VideoSource = null;\n  _mountedVideos: Set<HTMLVideoElement> = new Set();\n  _audioNodes: Set<MediaElementAudioSourceNode> = new Set();\n  playing: boolean = false;\n  _muted: boolean = false;\n  _volume: number = 1;\n  _loop: boolean = false;\n  _playbackRate: number = 1.0;\n  _preservesPitch: boolean = true;\n  _status: VideoPlayerStatus = 'idle';\n  _error: PlayerError | null = null;\n  _timeUpdateLoop: number | null = null;\n  _timeUpdateEventInterval: number = 0;\n  audioMixingMode: AudioMixingMode = 'auto'; // Not supported on web. Dummy to match the interface.\n  allowsExternalPlayback: boolean = false; // Not supported on web. Dummy to match the interface.\n  staysActiveInBackground: boolean = false; // Not supported on web. Dummy to match the interface.\n  showNowPlayingNotification: boolean = false; // Not supported on web. Dummy to match the interface.\n  currentLiveTimestamp: number | null = null; // Not supported on web. Dummy to match the interface.\n  currentOffsetFromLive: number | null = null; // Not supported on web. Dummy to match the interface.\n  targetOffsetFromLive: number = 0; // Not supported on web. Dummy to match the interface.\n  bufferOptions: BufferOptions = {} as BufferOptions; // Not supported on web. Dummy to match the interface.\n  subtitleTrack: SubtitleTrack | null = null; // Embedded subtitles are not supported by the html web player. Dummy to match the interface.\n  availableSubtitleTracks: SubtitleTrack[] = []; // Embedded subtitles are not supported by the html web player. Dummy to match the interface.\n\n  set muted(value: boolean) {\n    this._mountedVideos.forEach((video) => {\n      video.muted = value;\n    });\n    this._muted = value;\n  }\n\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  set playbackRate(value: number) {\n    this._mountedVideos.forEach((video) => {\n      video.playbackRate = value;\n    });\n  }\n\n  get playbackRate(): number {\n    return this._playbackRate;\n  }\n\n  get isLive(): boolean {\n    return [...this._mountedVideos][0]?.duration === Infinity;\n  }\n\n  set volume(value: number) {\n    this._mountedVideos.forEach((video) => {\n      video.volume = value;\n    });\n    this._volume = value;\n  }\n\n  get volume(): number {\n    return this._volume;\n  }\n\n  set loop(value: boolean) {\n    this._mountedVideos.forEach((video) => {\n      video.loop = value;\n    });\n    this._loop = value;\n  }\n\n  get loop(): boolean {\n    return this._loop;\n  }\n\n  get currentTime(): number {\n    // All videos should be synchronized, so we return the position of the first video.\n    return [...this._mountedVideos][0]?.currentTime ?? 0;\n  }\n\n  set currentTime(value: number) {\n    this._mountedVideos.forEach((video) => {\n      video.currentTime = value;\n    });\n  }\n\n  get duration(): number {\n    // All videos should have the same duration, so we return the duration of the first video.\n    return [...this._mountedVideos][0]?.duration ?? 0;\n  }\n\n  get preservesPitch(): boolean {\n    return this._preservesPitch;\n  }\n\n  set preservesPitch(value: boolean) {\n    this._mountedVideos.forEach((video) => {\n      video.preservesPitch = value;\n    });\n    this._preservesPitch = value;\n  }\n\n  get timeUpdateEventInterval(): number {\n    return this._timeUpdateEventInterval;\n  }\n  set timeUpdateEventInterval(value: number) {\n    this._timeUpdateEventInterval = value;\n    if (this._timeUpdateLoop) {\n      clearInterval(this._timeUpdateLoop);\n    }\n    if (value > 0) {\n      // Emit the first event immediately like on other platforms\n      this.emit('timeUpdate', {\n        currentTime: this.currentTime,\n        currentLiveTimestamp: null,\n        currentOffsetFromLive: null,\n        bufferedPosition: this.bufferedPosition,\n      });\n\n      this._timeUpdateLoop = setInterval(() => {\n        this.emit('timeUpdate', {\n          currentTime: this.currentTime,\n          currentLiveTimestamp: null,\n          currentOffsetFromLive: null,\n          bufferedPosition: this.bufferedPosition,\n        });\n      }, value * 1000);\n    }\n  }\n\n  get status(): VideoPlayerStatus {\n    return this._status;\n  }\n\n  get bufferedPosition(): number {\n    if (this._mountedVideos.size === 0 || this.status === 'error') {\n      return -1;\n    }\n    const buffered = [...this._mountedVideos][0]?.buffered;\n    for (let i = 0; i < buffered.length; i++) {\n      if (buffered.start(i) <= this.currentTime && buffered.end(i) >= this.currentTime) {\n        return buffered.end(i);\n      }\n    }\n    return 0;\n  }\n\n  private set status(value: VideoPlayerStatus) {\n    if (this._status === value) return;\n\n    if (value === 'error' && this._error) {\n      this.emit('statusChange', {\n        status: value,\n        oldStatus: this._status,\n        error: this._error,\n      });\n    } else {\n      this.emit('statusChange', {\n        status: value,\n        oldStatus: this._status,\n      });\n      this._error = null;\n    }\n    this._status = value;\n  }\n\n  mountVideoView(video: HTMLVideoElement) {\n    // The video will be the first video, it should inherit the properties set in the setup() function\n    if (this._mountedVideos.size === 0) {\n      video.preservesPitch = this._preservesPitch;\n      video.loop = this._loop;\n      video.volume = this._volume;\n      video.muted = this._muted;\n      video.playbackRate = this._playbackRate;\n    }\n    this._mountedVideos.add(video);\n    this._addListeners(video);\n    this._synchronizeWithFirstVideo(video);\n  }\n\n  unmountVideoView(video: HTMLVideoElement) {\n    this._mountedVideos.delete(video);\n  }\n\n  mountAudioNode(\n    audioContext: AudioContext,\n    zeroGainNode: GainNode,\n    audioSourceNode: MediaElementAudioSourceNode\n  ): void {\n    if (!audioContext || !zeroGainNode) return;\n\n    this._audioNodes.add(audioSourceNode);\n    // First mounted video should be connected to the audio context. All other videos have to be muted.\n    if (this._audioNodes.size === 1) {\n      audioSourceNode.connect(audioContext.destination);\n    } else {\n      audioSourceNode.connect(zeroGainNode);\n    }\n  }\n\n  unmountAudioNode(\n    video: HTMLVideoElement,\n    audioContext: AudioContext,\n    audioSourceNode: MediaElementAudioSourceNode\n  ) {\n    const mountedVideos = [...this._mountedVideos];\n    const videoPlayingAudio = mountedVideos[0];\n    this._audioNodes.delete(audioSourceNode);\n    audioSourceNode.disconnect();\n\n    // If video playing audio has been removed, select a new video to be the audio player by disconnecting it from the mute node.\n    if (videoPlayingAudio === video && this._audioNodes.size > 0 && audioContext) {\n      const newMainAudioSource = [...this._audioNodes][0];\n      newMainAudioSource.disconnect();\n      newMainAudioSource.connect(audioContext.destination);\n    }\n  }\n\n  play(): void {\n    this._mountedVideos.forEach((video) => {\n      video.play();\n    });\n  }\n\n  pause(): void {\n    this._mountedVideos.forEach((video) => {\n      video.pause();\n    });\n  }\n\n  replace(source: VideoSource): void {\n    this._mountedVideos.forEach((video) => {\n      const uri = getSourceUri(source);\n      video.pause();\n      if (uri) {\n        video.setAttribute('src', uri);\n        video.load();\n        video.play();\n      } else {\n        video.removeAttribute('src');\n        video.load();\n      }\n    });\n    // TODO @behenate: this won't work when we add support for playlists\n    this.previousSrc = this.src;\n    this.src = source;\n    this.playing = true;\n  }\n\n  seekBy(seconds: number): void {\n    this._mountedVideos.forEach((video) => {\n      video.currentTime += seconds;\n    });\n  }\n\n  replay(): void {\n    this._mountedVideos.forEach((video) => {\n      video.currentTime = 0;\n      video.play();\n    });\n    this.playing = true;\n  }\n\n  generateThumbnailsAsync(times: number | number[]): Promise<VideoThumbnail[]> {\n    throw new Error('Generating video thumbnails is not supported on Web yet');\n  }\n\n  _synchronizeWithFirstVideo(video: HTMLVideoElement): void {\n    const firstVideo = [...this._mountedVideos][0];\n    if (!firstVideo) return;\n\n    if (firstVideo.paused) {\n      video.pause();\n    } else {\n      video.play();\n    }\n    video.currentTime = firstVideo.currentTime;\n    video.volume = firstVideo.volume;\n    video.muted = firstVideo.muted;\n    video.playbackRate = firstVideo.playbackRate;\n  }\n\n  /**\n   * If there are multiple mounted videos, all of them will emit an event, as they are synchronised.\n   * We want to avoid this, so we only emit the event if it came from the first video.\n   */\n  _emitOnce<EventName extends keyof VideoPlayerEvents>(\n    eventSource: HTMLVideoElement,\n    eventName: EventName,\n    ...args: Parameters<VideoPlayerEvents[EventName]>\n  ): void {\n    const mountedVideos = [...this._mountedVideos];\n    if (mountedVideos[0] === eventSource) {\n      this.emit(eventName, ...args);\n    }\n  }\n\n  _addListeners(video: HTMLVideoElement): void {\n    video.onplay = () => {\n      this._emitOnce(video, 'playingChange', {\n        isPlaying: true,\n        oldIsPlaying: this.playing,\n      });\n      this.playing = true;\n      this._mountedVideos.forEach((mountedVideo) => {\n        mountedVideo.play();\n      });\n    };\n\n    video.onpause = () => {\n      this._emitOnce(video, 'playingChange', {\n        isPlaying: false,\n        oldIsPlaying: this.playing,\n      });\n      this.playing = false;\n      this._mountedVideos.forEach((mountedVideo) => {\n        mountedVideo.pause();\n      });\n    };\n\n    video.onvolumechange = () => {\n      this._emitOnce(video, 'volumeChange', { volume: video.volume, oldVolume: this.volume });\n      this._emitOnce(video, 'mutedChange', { muted: video.muted, oldMuted: this.muted });\n      this.volume = video.volume;\n      this.muted = video.muted;\n    };\n\n    video.onseeking = () => {\n      this._mountedVideos.forEach((mountedVideo) => {\n        if (mountedVideo === video || mountedVideo.currentTime === video.currentTime) return;\n        mountedVideo.currentTime = video.currentTime;\n      });\n    };\n\n    video.onseeked = () => {\n      this._mountedVideos.forEach((mountedVideo) => {\n        if (mountedVideo === video || mountedVideo.currentTime === video.currentTime) return;\n        mountedVideo.currentTime = video.currentTime;\n      });\n    };\n\n    video.onratechange = () => {\n      this._emitOnce(video, 'playbackRateChange', {\n        playbackRate: video.playbackRate,\n        oldPlaybackRate: this.playbackRate,\n      });\n      this._mountedVideos.forEach((mountedVideo) => {\n        if (mountedVideo.playbackRate === video.playbackRate) return;\n        this._playbackRate = video.playbackRate;\n        mountedVideo.playbackRate = video.playbackRate;\n      });\n      this._playbackRate = video.playbackRate;\n    };\n\n    video.onerror = () => {\n      this._error = {\n        message: video.error?.message ?? 'Unknown player error',\n      };\n      this.status = 'error';\n    };\n\n    video.oncanplay = () => {\n      const allCanPlay = [...this._mountedVideos].reduce((previousValue, video) => {\n        return previousValue && video.readyState >= 3;\n      }, true);\n      if (!allCanPlay) return;\n\n      this.status = 'readyToPlay';\n    };\n\n    video.onwaiting = () => {\n      if (this._status === 'loading') return;\n      this.status = 'loading';\n    };\n\n    video.onended = () => {\n      this._emitOnce(video, 'playToEnd');\n    };\n\n    video.onloadstart = () => {\n      this._emitOnce(video, 'sourceChange', { source: this.src, oldSource: this.previousSrc });\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
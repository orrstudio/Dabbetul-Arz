{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"state\",\"descriptors\"];import{HeaderShownContext,SafeAreaProviderCompat}from'@react-navigation/elements';import{CommonActions,StackActions}from'@react-navigation/native';import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{SafeAreaInsetsContext}from'react-native-safe-area-context';import{ModalPresentationContext}from\"../../utils/ModalPresentationContext.js\";import{GestureHandlerRootView}from'../GestureHandler';import{HeaderContainer}from\"../Header/HeaderContainer.js\";import{CardStack}from\"./CardStack.js\";import{jsx as _jsx}from\"react/jsx-runtime\";const GestureHandlerWrapper=GestureHandlerRootView??View;const isArrayEqual=(a,b)=>a.length===b.length&&a.every((it,index)=>it===b[index]);export class StackView extends React.Component{static getDerivedStateFromProps(props,state){if((props.state.routes===state.previousRoutes||isArrayEqual(props.state.routes.map(r=>r.key),state.previousRoutes.map(r=>r.key)))&&state.routes.length){let routes=state.routes;let previousRoutes=state.previousRoutes;let descriptors=props.descriptors;let previousDescriptors=state.previousDescriptors;if(props.descriptors!==state.previousDescriptors){descriptors=state.routes.reduce((acc,route)=>{acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});previousDescriptors=props.descriptors;}if(props.state.routes!==state.previousRoutes){const map=props.state.routes.reduce((acc,route)=>{acc[route.key]=route;return acc;},{});routes=state.routes.map(route=>map[route.key]||route);previousRoutes=props.state.routes;}return{routes,previousRoutes,descriptors,previousDescriptors};}let routes=props.state.index<props.state.routes.length-1?props.state.routes.slice(0,props.state.index+1):props.state.routes;const{previousRoutes}=state;let{openingRouteKeys,closingRouteKeys,replacingRouteKeys}=state;const previousFocusedRoute=previousRoutes[previousRoutes.length-1];const nextFocusedRoute=routes[routes.length-1];const isAnimationEnabled=key=>{const descriptor=props.descriptors[key]||state.descriptors[key];return descriptor?descriptor.options.animation!=='none':true;};const getAnimationTypeForReplace=key=>{const descriptor=props.descriptors[key]||state.descriptors[key];return descriptor.options.animationTypeForReplace??'push';};if(previousFocusedRoute&&previousFocusedRoute.key!==nextFocusedRoute.key){if(previousRoutes.some(r=>r.key===nextFocusedRoute.key)&&!routes.some(r=>r.key===previousFocusedRoute.key)){if(isAnimationEnabled(previousFocusedRoute.key)&&!closingRouteKeys.includes(previousFocusedRoute.key)){closingRouteKeys=[...closingRouteKeys,previousFocusedRoute.key];openingRouteKeys=openingRouteKeys.filter(key=>key!==previousFocusedRoute.key);replacingRouteKeys=replacingRouteKeys.filter(key=>key!==previousFocusedRoute.key);routes=[...routes,previousFocusedRoute];}}else{if(isAnimationEnabled(nextFocusedRoute.key)&&!openingRouteKeys.includes(nextFocusedRoute.key)){openingRouteKeys=[...openingRouteKeys,nextFocusedRoute.key];closingRouteKeys=closingRouteKeys.filter(key=>key!==nextFocusedRoute.key);replacingRouteKeys=replacingRouteKeys.filter(key=>key!==nextFocusedRoute.key);if(!routes.some(r=>r.key===previousFocusedRoute.key)){openingRouteKeys=openingRouteKeys.filter(key=>key!==previousFocusedRoute.key);if(getAnimationTypeForReplace(nextFocusedRoute.key)==='pop'){closingRouteKeys=[...closingRouteKeys,previousFocusedRoute.key];openingRouteKeys=openingRouteKeys.filter(key=>key!==nextFocusedRoute.key);routes=[...routes,previousFocusedRoute];}else{replacingRouteKeys=[...replacingRouteKeys,previousFocusedRoute.key];closingRouteKeys=closingRouteKeys.filter(key=>key!==previousFocusedRoute.key);routes=routes.slice();routes.splice(routes.length-1,0,previousFocusedRoute);}}}}}else if(replacingRouteKeys.length||closingRouteKeys.length){routes=routes.slice();routes.splice(routes.length-1,0,...state.routes.filter(({key})=>isAnimationEnabled(key)?replacingRouteKeys.includes(key)||closingRouteKeys.includes(key):false));}if(!routes.length){throw new Error('There should always be at least one route in the navigation state.');}const descriptors=routes.reduce((acc,route)=>{acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{routes,previousRoutes:props.state.routes,previousDescriptors:props.descriptors,openingRouteKeys,closingRouteKeys,replacingRouteKeys,descriptors};}state={routes:[],previousRoutes:[],previousDescriptors:{},openingRouteKeys:[],closingRouteKeys:[],replacingRouteKeys:[],descriptors:{}};getPreviousRoute=({route})=>{const{closingRouteKeys,replacingRouteKeys}=this.state;const routes=this.state.routes.filter(r=>r.key===route.key||!closingRouteKeys.includes(r.key)&&!replacingRouteKeys.includes(r.key));const index=routes.findIndex(r=>r.key===route.key);return routes[index-1];};renderHeader=props=>{return _jsx(HeaderContainer,Object.assign({},props));};handleOpenRoute=({route})=>{const{state,navigation}=this.props;const{closingRouteKeys,replacingRouteKeys}=this.state;if(closingRouteKeys.some(key=>key===route.key)&&replacingRouteKeys.every(key=>key!==route.key)&&state.routeNames.includes(route.name)&&!state.routes.some(r=>r.key===route.key)){navigation.dispatch(state=>{const routes=[...state.routes.filter(r=>r.key!==route.key),route];return CommonActions.reset(Object.assign({},state,{routes,index:routes.length-1}));});}else{this.setState(state=>({routes:state.replacingRouteKeys.length?state.routes.filter(r=>!state.replacingRouteKeys.includes(r.key)):state.routes,openingRouteKeys:state.openingRouteKeys.filter(key=>key!==route.key),closingRouteKeys:state.closingRouteKeys.filter(key=>key!==route.key),replacingRouteKeys:[]}));}};handleCloseRoute=({route})=>{const{state,navigation}=this.props;if(state.routes.some(r=>r.key===route.key)){navigation.dispatch(Object.assign({},StackActions.pop(),{source:route.key,target:state.key}));}else{this.setState(state=>({routes:state.routes.filter(r=>r.key!==route.key),openingRouteKeys:state.openingRouteKeys.filter(key=>key!==route.key),closingRouteKeys:state.closingRouteKeys.filter(key=>key!==route.key)}));}};handleTransitionStart=({route},closing)=>this.props.navigation.emit({type:'transitionStart',data:{closing},target:route.key});handleTransitionEnd=({route},closing)=>this.props.navigation.emit({type:'transitionEnd',data:{closing},target:route.key});handleGestureStart=({route})=>{this.props.navigation.emit({type:'gestureStart',target:route.key});};handleGestureEnd=({route})=>{this.props.navigation.emit({type:'gestureEnd',target:route.key});};handleGestureCancel=({route})=>{this.props.navigation.emit({type:'gestureCancel',target:route.key});};render(){const _this$props=this.props,{state}=_this$props,rest=_objectWithoutPropertiesLoose(_this$props,_excluded);const{routes,descriptors,openingRouteKeys,closingRouteKeys}=this.state;const preloadedDescriptors=state.preloadedRoutes.reduce((acc,route)=>{acc[route.key]=acc[route.key]||this.props.describe(route,true);return acc;},{});return _jsx(GestureHandlerWrapper,{style:styles.container,children:_jsx(SafeAreaProviderCompat,{children:_jsx(SafeAreaInsetsContext.Consumer,{children:insets=>_jsx(ModalPresentationContext.Consumer,{children:isParentModal=>_jsx(HeaderShownContext.Consumer,{children:isParentHeaderShown=>_jsx(CardStack,Object.assign({insets:insets,isParentHeaderShown:isParentHeaderShown,isParentModal:isParentModal,getPreviousRoute:this.getPreviousRoute,routes:routes,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,onOpenRoute:this.handleOpenRoute,onCloseRoute:this.handleCloseRoute,onTransitionStart:this.handleTransitionStart,onTransitionEnd:this.handleTransitionEnd,renderHeader:this.renderHeader,state:state,descriptors:descriptors,onGestureStart:this.handleGestureStart,onGestureEnd:this.handleGestureEnd,onGestureCancel:this.handleGestureCancel,preloadedDescriptors:preloadedDescriptors},rest))})})})})});}}const styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","CommonActions","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","jsx","_jsx","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","getDerivedStateFromProps","props","state","routes","previousRoutes","map","r","key","descriptors","previousDescriptors","reduce","acc","route","slice","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","options","animation","getAnimationTypeForReplace","animationTypeForReplace","some","includes","filter","splice","Error","getPreviousRoute","findIndex","renderHeader","Object","assign","handleOpenRoute","navigation","routeNames","name","dispatch","reset","setState","handleCloseRoute","pop","source","target","handleTransitionStart","closing","emit","type","data","handleTransitionEnd","handleGestureStart","handleGestureEnd","handleGestureCancel","render","_this$props","rest","_objectWithoutPropertiesLoose","_excluded","preloadedDescriptors","preloadedRoutes","describe","style","styles","container","children","Consumer","insets","isParentModal","isParentHeaderShown","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","create","flex"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  CommonActions,\n  type LocaleDirection,\n  type ParamListBase,\n  type Route,\n  type RouteProp,\n  StackActions,\n  type StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptor,\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport { ModalPresentationContext } from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport {\n  HeaderContainer,\n  type Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport { CardStack } from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  direction: LocaleDirection;\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  describe: (\n    route: RouteProp<ParamListBase>,\n    placeholder: boolean\n  ) => StackDescriptor;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    const { previousRoutes } = state;\n\n    let { openingRouteKeys, closingRouteKeys, replacingRouteKeys } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animation !== 'none' : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (\n        previousRoutes.some((r) => r.key === nextFocusedRoute.key) &&\n        !routes.some((r) => r.key === previousFocusedRoute.key)\n      ) {\n        // The previously focused route was removed, and the new focused route was already present\n        // We treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // A route has come to the focus, we treat this as a push\n        // A replace or rearranging can also trigger this\n        // The animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch((state) => {\n        const routes = [\n          ...state.routes.filter((r) => r.key !== route.key),\n          route,\n        ];\n\n        return CommonActions.reset({\n          ...state,\n          routes,\n          index: routes.length - 1,\n        });\n      });\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    const preloadedDescriptors =\n      state.preloadedRoutes.reduce<StackDescriptorMap>((acc, route) => {\n        acc[route.key] = acc[route.key] || this.props.describe(route, true);\n        return acc;\n      }, {});\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets!}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        preloadedDescriptors={preloadedDescriptors}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"oJAAA,OACEA,kBAAkB,CAClBC,sBAAsB,KACjB,4BAA4B,CACnC,OACEC,aAAa,CAKbC,YAAY,KAEP,0BAA0B,CACjC,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,QAAAC,UAAA,uDAAAC,IAAA,0CAE9B,OAASC,qBAAqB,KAAQ,gCAAgC,CAQtE,OAASC,wBAAwB,KAAQ,yCAAsC,CAC/E,OAASC,sBAAsB,KAAQ,mBAAmB,CAC1D,OACEC,eAAe,KAEV,8BAA2B,CAClC,OAASC,SAAS,KAAQ,gBAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBA+BxC,KAAM,CAAAC,qBAAqB,CAAGL,sBAAsB,EAAIH,IAAI,CAM5D,KAAM,CAAAS,YAAY,CAAGA,CAACC,CAAQ,CAAEC,CAAQ,GACtCD,CAAC,CAACE,MAAM,GAAKD,CAAC,CAACC,MAAM,EAAIF,CAAC,CAACG,KAAK,CAAC,CAACC,EAAE,CAAEC,KAAK,GAAKD,EAAE,GAAKH,CAAC,CAACI,KAAK,CAAC,CAAC,CAElE,MAAO,MAAM,CAAAC,SAAS,QAAS,CAAAlB,KAAK,CAACmB,SAAwB,CAC3D,MAAO,CAAAC,wBAAwBA,CAC7BC,KAAsB,CACtBC,KAAsB,CACtB,CAEA,GACE,CAACD,KAAK,CAACC,KAAK,CAACC,MAAM,GAAKD,KAAK,CAACE,cAAc,EAC1Cb,YAAY,CACVU,KAAK,CAACC,KAAK,CAACC,MAAM,CAACE,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAACC,GAAG,CAAC,CACpCL,KAAK,CAACE,cAAc,CAACC,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAACC,GAAG,CACvC,CAAC,GACHL,KAAK,CAACC,MAAM,CAACT,MAAM,CACnB,CACA,GAAI,CAAAS,MAAM,CAAGD,KAAK,CAACC,MAAM,CACzB,GAAI,CAAAC,cAAc,CAAGF,KAAK,CAACE,cAAc,CACzC,GAAI,CAAAI,WAAW,CAAGP,KAAK,CAACO,WAAW,CACnC,GAAI,CAAAC,mBAAmB,CAAGP,KAAK,CAACO,mBAAmB,CAEnD,GAAIR,KAAK,CAACO,WAAW,GAAKN,KAAK,CAACO,mBAAmB,CAAE,CACnDD,WAAW,CAAGN,KAAK,CAACC,MAAM,CAACO,MAAM,CAAqB,CAACC,GAAG,CAAEC,KAAK,GAAK,CACpED,GAAG,CAACC,KAAK,CAACL,GAAG,CAAC,CACZN,KAAK,CAACO,WAAW,CAACI,KAAK,CAACL,GAAG,CAAC,EAAIL,KAAK,CAACM,WAAW,CAACI,KAAK,CAACL,GAAG,CAAC,CAE9D,MAAO,CAAAI,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAENF,mBAAmB,CAAGR,KAAK,CAACO,WAAW,CACzC,CAEA,GAAIP,KAAK,CAACC,KAAK,CAACC,MAAM,GAAKD,KAAK,CAACE,cAAc,CAAE,CAE/C,KAAM,CAAAC,GAAG,CAAGJ,KAAK,CAACC,KAAK,CAACC,MAAM,CAACO,MAAM,CACnC,CAACC,GAAG,CAAEC,KAAK,GAAK,CACdD,GAAG,CAACC,KAAK,CAACL,GAAG,CAAC,CAAGK,KAAK,CACtB,MAAO,CAAAD,GAAG,CACZ,CAAC,CACD,CAAC,CACH,CAAC,CAEDR,MAAM,CAAGD,KAAK,CAACC,MAAM,CAACE,GAAG,CAAEO,KAAK,EAAKP,GAAG,CAACO,KAAK,CAACL,GAAG,CAAC,EAAIK,KAAK,CAAC,CAC7DR,cAAc,CAAGH,KAAK,CAACC,KAAK,CAACC,MAAM,CACrC,CAEA,MAAO,CACLA,MAAM,CACNC,cAAc,CACdI,WAAW,CACXC,mBACF,CAAC,CACH,CAKA,GAAI,CAAAN,MAAM,CACRF,KAAK,CAACC,KAAK,CAACL,KAAK,CAAGI,KAAK,CAACC,KAAK,CAACC,MAAM,CAACT,MAAM,CAAG,CAAC,CAG7CO,KAAK,CAACC,KAAK,CAACC,MAAM,CAACU,KAAK,CAAC,CAAC,CAAEZ,KAAK,CAACC,KAAK,CAACL,KAAK,CAAG,CAAC,CAAC,CAClDI,KAAK,CAACC,KAAK,CAACC,MAAM,CAGxB,KAAM,CAAEC,cAAe,CAAC,CAAGF,KAAK,CAEhC,GAAI,CAAEY,gBAAgB,CAAEC,gBAAgB,CAAEC,kBAAmB,CAAC,CAAGd,KAAK,CAEtE,KAAM,CAAAe,oBAAoB,CAAGb,cAAc,CAACA,cAAc,CAACV,MAAM,CAAG,CAAC,CAExD,CACb,KAAM,CAAAwB,gBAAgB,CAAGf,MAAM,CAACA,MAAM,CAACT,MAAM,CAAG,CAAC,CAAC,CAElD,KAAM,CAAAyB,kBAAkB,CAAIZ,GAAW,EAAK,CAC1C,KAAM,CAAAa,UAAU,CAAGnB,KAAK,CAACO,WAAW,CAACD,GAAG,CAAC,EAAIL,KAAK,CAACM,WAAW,CAACD,GAAG,CAAC,CAEnE,MAAO,CAAAa,UAAU,CAAGA,UAAU,CAACC,OAAO,CAACC,SAAS,GAAK,MAAM,CAAG,IAAI,CACpE,CAAC,CAED,KAAM,CAAAC,0BAA0B,CAAIhB,GAAW,EAAK,CAClD,KAAM,CAAAa,UAAU,CAAGnB,KAAK,CAACO,WAAW,CAACD,GAAG,CAAC,EAAIL,KAAK,CAACM,WAAW,CAACD,GAAG,CAAC,CAEnE,MAAO,CAAAa,UAAU,CAACC,OAAO,CAACG,uBAAuB,EAAI,MAAM,CAC7D,CAAC,CAED,GACEP,oBAAoB,EACpBA,oBAAoB,CAACV,GAAG,GAAKW,gBAAgB,CAACX,GAAG,CACjD,CAIA,GACEH,cAAc,CAACqB,IAAI,CAAEnB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKW,gBAAgB,CAACX,GAAG,CAAC,EAC1D,CAACJ,MAAM,CAACsB,IAAI,CAAEnB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKU,oBAAoB,CAACV,GAAG,CAAC,CACvD,CAIA,GACEY,kBAAkB,CAACF,oBAAoB,CAACV,GAAG,CAAC,EAC5C,CAACQ,gBAAgB,CAACW,QAAQ,CAACT,oBAAoB,CAACV,GAAG,CAAC,CACpD,CACAQ,gBAAgB,CAAG,CAAC,GAAGA,gBAAgB,CAAEE,oBAAoB,CAACV,GAAG,CAAC,CAIlEO,gBAAgB,CAAGA,gBAAgB,CAACa,MAAM,CACvCpB,GAAG,EAAKA,GAAG,GAAKU,oBAAoB,CAACV,GACxC,CAAC,CACDS,kBAAkB,CAAGA,kBAAkB,CAACW,MAAM,CAC3CpB,GAAG,EAAKA,GAAG,GAAKU,oBAAoB,CAACV,GACxC,CAAC,CAGDJ,MAAM,CAAG,CAAC,GAAGA,MAAM,CAAEc,oBAAoB,CAAC,CAC5C,CACF,CAAC,IAAM,CAKL,GACEE,kBAAkB,CAACD,gBAAgB,CAACX,GAAG,CAAC,EACxC,CAACO,gBAAgB,CAACY,QAAQ,CAACR,gBAAgB,CAACX,GAAG,CAAC,CAChD,CAGAO,gBAAgB,CAAG,CAAC,GAAGA,gBAAgB,CAAEI,gBAAgB,CAACX,GAAG,CAAC,CAE9DQ,gBAAgB,CAAGA,gBAAgB,CAACY,MAAM,CACvCpB,GAAG,EAAKA,GAAG,GAAKW,gBAAgB,CAACX,GACpC,CAAC,CACDS,kBAAkB,CAAGA,kBAAkB,CAACW,MAAM,CAC3CpB,GAAG,EAAKA,GAAG,GAAKW,gBAAgB,CAACX,GACpC,CAAC,CAED,GAAI,CAACJ,MAAM,CAACsB,IAAI,CAAEnB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKU,oBAAoB,CAACV,GAAG,CAAC,CAAE,CAG3DO,gBAAgB,CAAGA,gBAAgB,CAACa,MAAM,CACvCpB,GAAG,EAAKA,GAAG,GAAKU,oBAAoB,CAACV,GACxC,CAAC,CAED,GAAIgB,0BAA0B,CAACL,gBAAgB,CAACX,GAAG,CAAC,GAAK,KAAK,CAAE,CAC9DQ,gBAAgB,CAAG,CACjB,GAAGA,gBAAgB,CACnBE,oBAAoB,CAACV,GAAG,CACzB,CAKDO,gBAAgB,CAAGA,gBAAgB,CAACa,MAAM,CACvCpB,GAAG,EAAKA,GAAG,GAAKW,gBAAgB,CAACX,GACpC,CAAC,CAGDJ,MAAM,CAAG,CAAC,GAAGA,MAAM,CAAEc,oBAAoB,CAAC,CAC5C,CAAC,IAAM,CACLD,kBAAkB,CAAG,CACnB,GAAGA,kBAAkB,CACrBC,oBAAoB,CAACV,GAAG,CACzB,CAEDQ,gBAAgB,CAAGA,gBAAgB,CAACY,MAAM,CACvCpB,GAAG,EAAKA,GAAG,GAAKU,oBAAoB,CAACV,GACxC,CAAC,CAKDJ,MAAM,CAAGA,MAAM,CAACU,KAAK,CAAC,CAAC,CACvBV,MAAM,CAACyB,MAAM,CAACzB,MAAM,CAACT,MAAM,CAAG,CAAC,CAAE,CAAC,CAAEuB,oBAAoB,CAAC,CAC3D,CACF,CACF,CACF,CACF,CAAC,IAAM,IAAID,kBAAkB,CAACtB,MAAM,EAAIqB,gBAAgB,CAACrB,MAAM,CAAE,CAE/DS,MAAM,CAAGA,MAAM,CAACU,KAAK,CAAC,CAAC,CACvBV,MAAM,CAACyB,MAAM,CACXzB,MAAM,CAACT,MAAM,CAAG,CAAC,CACjB,CAAC,CACD,GAAGQ,KAAK,CAACC,MAAM,CAACwB,MAAM,CAAC,CAAC,CAAEpB,GAAI,CAAC,GAC7BY,kBAAkB,CAACZ,GAAG,CAAC,CACnBS,kBAAkB,CAACU,QAAQ,CAACnB,GAAG,CAAC,EAAIQ,gBAAgB,CAACW,QAAQ,CAACnB,GAAG,CAAC,CAClE,KACN,CACF,CAAC,CACH,CAEA,GAAI,CAACJ,MAAM,CAACT,MAAM,CAAE,CAClB,KAAM,IAAI,CAAAmC,KAAK,CACb,oEACF,CAAC,CACH,CAEA,KAAM,CAAArB,WAAW,CAAGL,MAAM,CAACO,MAAM,CAAqB,CAACC,GAAG,CAAEC,KAAK,GAAK,CACpED,GAAG,CAACC,KAAK,CAACL,GAAG,CAAC,CACZN,KAAK,CAACO,WAAW,CAACI,KAAK,CAACL,GAAG,CAAC,EAAIL,KAAK,CAACM,WAAW,CAACI,KAAK,CAACL,GAAG,CAAC,CAE9D,MAAO,CAAAI,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAEN,MAAO,CACLR,MAAM,CACNC,cAAc,CAAEH,KAAK,CAACC,KAAK,CAACC,MAAM,CAClCM,mBAAmB,CAAER,KAAK,CAACO,WAAW,CACtCM,gBAAgB,CAChBC,gBAAgB,CAChBC,kBAAkB,CAClBR,WACF,CAAC,CACH,CAEAN,KAAK,CAAU,CACbC,MAAM,CAAE,EAAE,CACVC,cAAc,CAAE,EAAE,CAClBK,mBAAmB,CAAE,CAAC,CAAC,CACvBK,gBAAgB,CAAE,EAAE,CACpBC,gBAAgB,CAAE,EAAE,CACpBC,kBAAkB,CAAE,EAAE,CACtBR,WAAW,CAAE,CAAC,CAChB,CAAC,CAEOsB,gBAAgB,CAAGA,CAAC,CAAElB,KAAgC,CAAC,GAAK,CAClE,KAAM,CAAEG,gBAAgB,CAAEC,kBAAmB,CAAC,CAAG,IAAI,CAACd,KAAK,CAC3D,KAAM,CAAAC,MAAM,CAAG,IAAI,CAACD,KAAK,CAACC,MAAM,CAACwB,MAAM,CACpCrB,CAAC,EACAA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,EAClB,CAACQ,gBAAgB,CAACW,QAAQ,CAACpB,CAAC,CAACC,GAAG,CAAC,EAChC,CAACS,kBAAkB,CAACU,QAAQ,CAACpB,CAAC,CAACC,GAAG,CACxC,CAAC,CAED,KAAM,CAAAV,KAAK,CAAGM,MAAM,CAAC4B,SAAS,CAAEzB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,CAE1D,MAAO,CAAAJ,MAAM,CAACN,KAAK,CAAG,CAAC,CAAC,CAC1B,CAAC,CAEOmC,YAAY,CAAI/B,KAA2B,EAAK,CACtD,MAAO,CAAAZ,IAAA,CAACH,eAAe,CAAA+C,MAAA,CAAAC,MAAA,IAAKjC,KAAA,CAAQ,CAAC,CACvC,CAAC,CAEOkC,eAAe,CAAGA,CAAC,CAAEvB,KAAgC,CAAC,GAAK,CACjE,KAAM,CAAEV,KAAK,CAAEkC,UAAW,CAAC,CAAG,IAAI,CAACnC,KAAK,CACxC,KAAM,CAAEc,gBAAgB,CAAEC,kBAAmB,CAAC,CAAG,IAAI,CAACd,KAAK,CAE3D,GACEa,gBAAgB,CAACU,IAAI,CAAElB,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,EACjDS,kBAAkB,CAACrB,KAAK,CAAEY,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,EACpDL,KAAK,CAACmC,UAAU,CAACX,QAAQ,CAACd,KAAK,CAAC0B,IAAI,CAAC,EACrC,CAACpC,KAAK,CAACC,MAAM,CAACsB,IAAI,CAAEnB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,CAC9C,CAGA6B,UAAU,CAACG,QAAQ,CAAErC,KAAK,EAAK,CAC7B,KAAM,CAAAC,MAAM,CAAG,CACb,GAAGD,KAAK,CAACC,MAAM,CAACwB,MAAM,CAAErB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,CAClDK,KAAK,CACN,CAED,MAAO,CAAAlC,aAAa,CAAC8D,KAAK,CAAAP,MAAA,CAAAC,MAAA,IACrBhC,KAAK,EACRC,MAAM,CACNN,KAAK,CAAEM,MAAM,CAACT,MAAM,CAAG,GACxB,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,IAAM,CACL,IAAI,CAAC+C,QAAQ,CAAEvC,KAAK,GAAM,CACxBC,MAAM,CAAED,KAAK,CAACc,kBAAkB,CAACtB,MAAM,CACnCQ,KAAK,CAACC,MAAM,CAACwB,MAAM,CAChBrB,CAAC,EAAK,CAACJ,KAAK,CAACc,kBAAkB,CAACU,QAAQ,CAACpB,CAAC,CAACC,GAAG,CACjD,CAAC,CACDL,KAAK,CAACC,MAAM,CAChBW,gBAAgB,CAAEZ,KAAK,CAACY,gBAAgB,CAACa,MAAM,CAC5CpB,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GACzB,CAAC,CACDQ,gBAAgB,CAAEb,KAAK,CAACa,gBAAgB,CAACY,MAAM,CAC5CpB,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GACzB,CAAC,CACDS,kBAAkB,CAAE,EACtB,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAEO0B,gBAAgB,CAAGA,CAAC,CAAE9B,KAAgC,CAAC,GAAK,CAClE,KAAM,CAAEV,KAAK,CAAEkC,UAAW,CAAC,CAAG,IAAI,CAACnC,KAAK,CAExC,GAAIC,KAAK,CAACC,MAAM,CAACsB,IAAI,CAAEnB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,CAAE,CAIjD6B,UAAU,CAACG,QAAQ,CAAAN,MAAA,CAAAC,MAAA,IACdvD,YAAY,CAACgE,GAAG,CAAC,CAAC,EACrBC,MAAM,CAAEhC,KAAK,CAACL,GAAG,CACjBsC,MAAM,CAAE3C,KAAK,CAACK,GAAA,EACf,CAAC,CACJ,CAAC,IAAM,CAEL,IAAI,CAACkC,QAAQ,CAAEvC,KAAK,GAAM,CACxBC,MAAM,CAAED,KAAK,CAACC,MAAM,CAACwB,MAAM,CAAErB,CAAC,EAAKA,CAAC,CAACC,GAAG,GAAKK,KAAK,CAACL,GAAG,CAAC,CACvDO,gBAAgB,CAAEZ,KAAK,CAACY,gBAAgB,CAACa,MAAM,CAC5CpB,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GACzB,CAAC,CACDQ,gBAAgB,CAAEb,KAAK,CAACa,gBAAgB,CAACY,MAAM,CAC5CpB,GAAG,EAAKA,GAAG,GAAKK,KAAK,CAACL,GACzB,CACF,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAEOuC,qBAAqB,CAAGA,CAC9B,CAAElC,KAAgC,CAAC,CACnCmC,OAAgB,GAEhB,IAAI,CAAC9C,KAAK,CAACmC,UAAU,CAACY,IAAI,CAAC,CACzBC,IAAI,CAAE,iBAAiB,CACvBC,IAAI,CAAE,CAAEH,OAAQ,CAAC,CACjBF,MAAM,CAAEjC,KAAK,CAACL,GAChB,CAAC,CAAC,CAEI4C,mBAAmB,CAAGA,CAC5B,CAAEvC,KAAgC,CAAC,CACnCmC,OAAgB,GAEhB,IAAI,CAAC9C,KAAK,CAACmC,UAAU,CAACY,IAAI,CAAC,CACzBC,IAAI,CAAE,eAAe,CACrBC,IAAI,CAAE,CAAEH,OAAQ,CAAC,CACjBF,MAAM,CAAEjC,KAAK,CAACL,GAChB,CAAC,CAAC,CAEI6C,kBAAkB,CAAGA,CAAC,CAAExC,KAAgC,CAAC,GAAK,CACpE,IAAI,CAACX,KAAK,CAACmC,UAAU,CAACY,IAAI,CAAC,CACzBC,IAAI,CAAE,cAAc,CACpBJ,MAAM,CAAEjC,KAAK,CAACL,GAChB,CAAC,CAAC,CACJ,CAAC,CAEO8C,gBAAgB,CAAGA,CAAC,CAAEzC,KAAgC,CAAC,GAAK,CAClE,IAAI,CAACX,KAAK,CAACmC,UAAU,CAACY,IAAI,CAAC,CACzBC,IAAI,CAAE,YAAY,CAClBJ,MAAM,CAAEjC,KAAK,CAACL,GAChB,CAAC,CAAC,CACJ,CAAC,CAEO+C,mBAAmB,CAAGA,CAAC,CAAE1C,KAAgC,CAAC,GAAK,CACrE,IAAI,CAACX,KAAK,CAACmC,UAAU,CAACY,IAAI,CAAC,CACzBC,IAAI,CAAE,eAAe,CACrBJ,MAAM,CAAEjC,KAAK,CAACL,GAChB,CAAC,CAAC,CACJ,CAAC,CAEDgD,MAAMA,CAAA,CAAG,CACP,MAAAC,WAAA,CAKI,IAAI,CAACvD,KAAK,CALR,CACJC,KAIF,CAAC,CAAAsD,WAAA,CADIC,IAAA,CAAAC,6BAAA,CAAAF,WAAA,CAAAG,SAAA,EAGL,KAAM,CAAExD,MAAM,CAAEK,WAAW,CAAEM,gBAAgB,CAAEC,gBAAiB,CAAC,CAC/D,IAAI,CAACb,KAAK,CAEZ,KAAM,CAAA0D,oBAAoB,CACxB1D,KAAK,CAAC2D,eAAe,CAACnD,MAAM,CAAqB,CAACC,GAAG,CAAEC,KAAK,GAAK,CAC/DD,GAAG,CAACC,KAAK,CAACL,GAAG,CAAC,CAAGI,GAAG,CAACC,KAAK,CAACL,GAAG,CAAC,EAAI,IAAI,CAACN,KAAK,CAAC6D,QAAQ,CAAClD,KAAK,CAAE,IAAI,CAAC,CACnE,MAAO,CAAAD,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAER,MACE,CAAAtB,IAAA,CAACC,qBAAqB,EAACyE,KAAK,CAAEC,MAAM,CAACC,SAAU,CAAAC,QAAA,CAC7C7E,IAAA,CAACZ,sBAAsB,EAAAyF,QAAA,CACrB7E,IAAA,CAACN,qBAAqB,CAACoF,QAAQ,EAAAD,QAAA,CAC3BE,MAAM,EACN/E,IAAA,CAACL,wBAAwB,CAACmF,QAAQ,EAAAD,QAAA,CAC9BG,aAAa,EACbhF,IAAA,CAACb,kBAAkB,CAAC2F,QAAQ,EAAAD,QAAA,CACxBI,mBAAmB,EACnBjF,IAAA,CAACF,SAAS,CAAA8C,MAAA,CAAAC,MAAA,EACRkC,MAAM,CAAEA,MAAQ,CAChBE,mBAAmB,CAAEA,mBAAoB,CACzCD,aAAa,CAAEA,aAAc,CAC7BvC,gBAAgB,CAAE,IAAI,CAACA,gBAAiB,CACxC3B,MAAM,CAAEA,MAAO,CACfW,gBAAgB,CAAEA,gBAAiB,CACnCC,gBAAgB,CAAEA,gBAAiB,CACnCwD,WAAW,CAAE,IAAI,CAACpC,eAAgB,CAClCqC,YAAY,CAAE,IAAI,CAAC9B,gBAAiB,CACpC+B,iBAAiB,CAAE,IAAI,CAAC3B,qBAAsB,CAC9C4B,eAAe,CAAE,IAAI,CAACvB,mBAAoB,CAC1CnB,YAAY,CAAE,IAAI,CAACA,YAAa,CAChC9B,KAAK,CAAEA,KAAM,CACbM,WAAW,CAAEA,WAAY,CACzBmE,cAAc,CAAE,IAAI,CAACvB,kBAAmB,CACxCwB,YAAY,CAAE,IAAI,CAACvB,gBAAiB,CACpCwB,eAAe,CAAE,IAAI,CAACvB,mBAAoB,CAC1CM,oBAAoB,CAAEA,oBAAqB,EACvCH,IAAA,CACL,CACF,CAC0B,CAC9B,CACgC,CACpC,CAC6B,CAAC,CACX,CAAC,CACJ,CAAC,CAE5B,CACF,CAEA,KAAM,CAAAO,MAAM,CAAGnF,UAAU,CAACiG,MAAM,CAAC,CAC/Bb,SAAS,CAAE,CACTc,IAAI,CAAE,CACR,CACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
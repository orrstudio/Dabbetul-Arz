{"ast":null,"code":"\"use strict\";import{getDefaultHeaderHeight,SafeAreaProviderCompat}from'@react-navigation/elements';import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{forModalPresentationIOS,forNoAnimation as forNoAnimationCard}from\"../../TransitionConfigs/CardStyleInterpolators.js\";import{BottomSheetAndroid,DefaultTransition,FadeFromBottomAndroid,FadeFromRightAndroid,ModalFadeTransition,ModalSlideFromBottomIOS,ModalTransition,RevealFromBottomAndroid,ScaleFromCenterAndroid,SlideFromLeftIOS,SlideFromRightIOS}from\"../../TransitionConfigs/TransitionPresets.js\";import{findLastIndex}from\"../../utils/findLastIndex.js\";import{getDistanceForDirection}from\"../../utils/getDistanceForDirection.js\";import{getModalRouteKeys}from\"../../utils/getModalRoutesKeys.js\";import{MaybeScreen,MaybeScreenContainer}from\"../Screens.js\";import{CardContainer}from\"./CardContainer.js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NAMED_TRANSITIONS_PRESETS={default:DefaultTransition,fade:ModalFadeTransition,fade_from_bottom:FadeFromBottomAndroid,fade_from_right:FadeFromRightAndroid,none:DefaultTransition,reveal_from_bottom:RevealFromBottomAndroid,scale_from_center:ScaleFromCenterAndroid,slide_from_left:SlideFromLeftIOS,slide_from_right:SlideFromRightIOS,slide_from_bottom:BottomSheetAndroid};const EPSILON=1e-5;const STATE_INACTIVE=0;const STATE_TRANSITIONING_OR_BELOW_TOP=1;const STATE_ON_TOP=2;const FALLBACK_DESCRIPTOR=Object.freeze({options:{}});const getInterpolationIndex=(scenes,index)=>{const{cardStyleInterpolator}=scenes[index].descriptor.options;let interpolationIndex=0;for(let i=index-1;i>=0;i--){const cardStyleInterpolatorCurrent=scenes[i]?.descriptor.options.cardStyleInterpolator;if(cardStyleInterpolatorCurrent!==cardStyleInterpolator){break;}interpolationIndex++;}return interpolationIndex;};const getIsModalPresentation=cardStyleInterpolator=>{return cardStyleInterpolator===forModalPresentationIOS||cardStyleInterpolator.name==='forModalPresentationIOS';};const getIsModal=(scene,interpolationIndex,isParentModal)=>{if(isParentModal){return true;}const{cardStyleInterpolator}=scene.descriptor.options;const isModalPresentation=getIsModalPresentation(cardStyleInterpolator);const isModal=isModalPresentation&&interpolationIndex!==0;return isModal;};const getHeaderHeights=(scenes,insets,isParentHeaderShown,isParentModal,layout,previous)=>{return scenes.reduce((acc,curr,index)=>{const{headerStatusBarHeight=isParentHeaderShown?0:insets.top,headerStyle}=curr.descriptor.options;const style=StyleSheet.flatten(headerStyle||{});const height='height'in style&&typeof style.height==='number'?style.height:previous[curr.route.key];const interpolationIndex=getInterpolationIndex(scenes,index);const isModal=getIsModal(curr,interpolationIndex,isParentModal);acc[curr.route.key]=typeof height==='number'?height:getDefaultHeaderHeight(layout,isModal,headerStatusBarHeight);return acc;},{});};const getDistanceFromOptions=(layout,descriptor,isRTL)=>{if(descriptor?.options.gestureDirection){return getDistanceForDirection(layout,descriptor?.options.gestureDirection,isRTL);}const defaultGestureDirection=descriptor?.options.presentation==='modal'?ModalTransition.gestureDirection:DefaultTransition.gestureDirection;const gestureDirection=descriptor?.options.animation?NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection:defaultGestureDirection;return getDistanceForDirection(layout,gestureDirection,isRTL);};const getProgressFromGesture=(gesture,layout,descriptor,isRTL)=>{const distance=getDistanceFromOptions({width:Math.max(1,layout.width),height:Math.max(1,layout.height)},descriptor,isRTL);if(distance>0){return gesture.interpolate({inputRange:[0,distance],outputRange:[1,0]});}return gesture.interpolate({inputRange:[distance,0],outputRange:[0,1]});};export class CardStack extends React.Component{static getDerivedStateFromProps(props,state){if(props.routes===state.routes&&props.descriptors===state.descriptors){return null;}const gestures=[...props.routes,...props.state.preloadedRoutes].reduce((acc,curr)=>{const descriptor=props.descriptors[curr.key]||props.preloadedDescriptors[curr.key];const{animation}=descriptor?.options||{};acc[curr.key]=state.gestures[curr.key]||new Animated.Value(props.openingRouteKeys.includes(curr.key)&&animation!=='none'||props.state.preloadedRoutes.includes(curr)?getDistanceFromOptions(state.layout,descriptor,props.direction==='rtl'):0);return acc;},{});const modalRouteKeys=getModalRouteKeys([...props.routes,...props.state.preloadedRoutes],Object.assign({},props.descriptors,props.preloadedDescriptors));const scenes=[...props.routes,...props.state.preloadedRoutes].map((route,index,self)=>{const isPreloaded=props.state.preloadedRoutes.includes(route);const previousRoute=isPreloaded?undefined:self[index-1];const nextRoute=isPreloaded?undefined:self[index+1];const oldScene=state.scenes[index];const currentGesture=gestures[route.key];const previousGesture=previousRoute?gestures[previousRoute.key]:undefined;const nextGesture=nextRoute?gestures[nextRoute.key]:undefined;const descriptor=(isPreloaded?props.preloadedDescriptors:props.descriptors)[route.key]||state.descriptors[route.key]||(oldScene?oldScene.descriptor:FALLBACK_DESCRIPTOR);const nextDescriptor=nextRoute&&(props.descriptors[nextRoute?.key]||state.descriptors[nextRoute?.key]);const previousDescriptor=previousRoute&&(props.descriptors[previousRoute?.key]||state.descriptors[previousRoute?.key]);const optionsForTransitionConfig=index!==self.length-1&&nextDescriptor&&nextDescriptor.options.presentation!=='transparentModal'?nextDescriptor.options:descriptor.options;const isModal=modalRouteKeys.includes(route.key);const excludedPlatforms=false&&true&&true;const animation=optionsForTransitionConfig.animation??(excludedPlatforms?'default':'none');const isAnimationEnabled=animation!=='none';const transitionPreset=animation!=='default'?NAMED_TRANSITIONS_PRESETS[animation]:isModal||optionsForTransitionConfig.presentation==='modal'?ModalTransition:optionsForTransitionConfig.presentation==='transparentModal'?ModalFadeTransition:DefaultTransition;const{gestureEnabled=false&&isAnimationEnabled,gestureDirection=transitionPreset.gestureDirection,transitionSpec=transitionPreset.transitionSpec,cardStyleInterpolator=isAnimationEnabled?transitionPreset.cardStyleInterpolator:forNoAnimationCard,headerStyleInterpolator=transitionPreset.headerStyleInterpolator,cardOverlayEnabled=true&&optionsForTransitionConfig.presentation!=='transparentModal'||getIsModalPresentation(cardStyleInterpolator)}=optionsForTransitionConfig;const headerMode=descriptor.options.headerMode??(!(optionsForTransitionConfig.presentation==='modal'||optionsForTransitionConfig.presentation==='transparentModal'||nextDescriptor?.options.presentation==='modal'||nextDescriptor?.options.presentation==='transparentModal'||getIsModalPresentation(cardStyleInterpolator))&&false&&descriptor.options.header===undefined?'float':'screen');const isRTL=props.direction==='rtl';const scene={route,descriptor:Object.assign({},descriptor,{options:Object.assign({},descriptor.options,{animation,cardOverlayEnabled,cardStyleInterpolator,gestureDirection,gestureEnabled,headerStyleInterpolator,transitionSpec,headerMode})}),progress:{current:getProgressFromGesture(currentGesture,state.layout,descriptor,isRTL),next:nextGesture&&nextDescriptor?.options.presentation!=='transparentModal'?getProgressFromGesture(nextGesture,state.layout,nextDescriptor,isRTL):undefined,previous:previousGesture?getProgressFromGesture(previousGesture,state.layout,previousDescriptor,isRTL):undefined},__memo:[state.layout,descriptor,nextDescriptor,previousDescriptor,currentGesture,nextGesture,previousGesture]};if(oldScene&&scene.__memo.every((it,i)=>{return oldScene.__memo[i]===it;})){return oldScene;}return scene;});return{routes:props.routes,scenes,gestures,descriptors:props.descriptors,headerHeights:getHeaderHeights(scenes,props.insets,props.isParentHeaderShown,props.isParentModal,state.layout,state.headerHeights)};}constructor(props){super(props);this.state={routes:[],scenes:[],gestures:{},layout:SafeAreaProviderCompat.initialMetrics.frame,descriptors:this.props.descriptors,headerHeights:{}};}handleLayout=e=>{const{height,width}=e.nativeEvent.layout;const layout={width,height};this.setState((state,props)=>{if(height===state.layout.height&&width===state.layout.width){return null;}return{layout,headerHeights:getHeaderHeights(state.scenes,props.insets,props.isParentHeaderShown,props.isParentModal,layout,state.headerHeights)};});};handleHeaderLayout=({route,height})=>{this.setState(({headerHeights})=>{const previousHeight=headerHeights[route.key];if(previousHeight===height){return null;}return{headerHeights:Object.assign({},headerHeights,{[route.key]:height})};});};getFocusedRoute=()=>{const{state}=this.props;return state.routes[state.index];};getPreviousScene=({route})=>{const{getPreviousRoute}=this.props;const{scenes}=this.state;const previousRoute=getPreviousRoute({route});if(previousRoute){const previousScene=scenes.find(scene=>scene.descriptor.route.key===previousRoute.key);return previousScene;}return undefined;};render(){const{insets,state,routes,openingRouteKeys,closingRouteKeys,onOpenRoute,onCloseRoute,renderHeader,isParentHeaderShown,isParentModal,onTransitionStart,onTransitionEnd,onGestureStart,onGestureEnd,onGestureCancel,detachInactiveScreens=true||false||false}=this.props;const{scenes,layout,gestures,headerHeights}=this.state;const focusedRoute=state.routes[state.index];const focusedHeaderHeight=headerHeights[focusedRoute.key];const isFloatHeaderAbsolute=this.state.scenes.slice(-2).some(scene=>{const options=scene.descriptor.options??{};const{headerMode,headerTransparent,headerShown=true}=options;if(headerTransparent||headerShown===false||headerMode==='screen'){return true;}return false;});let activeScreensLimit=1;for(let i=scenes.length-1;i>=0;i--){const{options}=scenes[i].descriptor;const{detachPreviousScreen=options.presentation==='transparentModal'?false:getIsModalPresentation(options.cardStyleInterpolator)?i!==findLastIndex(scenes,scene=>{const{cardStyleInterpolator}=scene.descriptor.options;return cardStyleInterpolator===forModalPresentationIOS||cardStyleInterpolator?.name==='forModalPresentationIOS';}):true}=options;if(detachPreviousScreen===false){activeScreensLimit++;}else{if(i<=scenes.length-2){break;}}}const floatingHeader=_jsx(React.Fragment,{children:renderHeader({mode:'float',layout,scenes,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,onContentHeightChange:this.handleHeaderLayout,style:[styles.floating,isFloatHeaderAbsolute&&[{height:focusedHeaderHeight},styles.absolute]]})},\"header\");return _jsxs(View,{style:styles.container,children:[isFloatHeaderAbsolute?null:floatingHeader,_jsx(MaybeScreenContainer,{enabled:detachInactiveScreens,style:styles.container,onLayout:this.handleLayout,children:[...routes,...state.preloadedRoutes].map((route,index)=>{const focused=focusedRoute.key===route.key;const gesture=gestures[route.key];const scene=scenes[index];const isPreloaded=state.preloadedRoutes.includes(route)&&!routes.includes(route);if(state.preloadedRoutes.includes(route)&&routes.includes(route)&&index>=routes.length){return null;}let isScreenActive=1;if(index<routes.length-activeScreensLimit-1||isPreloaded){isScreenActive=STATE_INACTIVE;}else{const sceneForActivity=scenes[routes.length-1];const outputValue=index===routes.length-1?STATE_ON_TOP:index>=routes.length-activeScreensLimit?STATE_TRANSITIONING_OR_BELOW_TOP:STATE_INACTIVE;isScreenActive=sceneForActivity?sceneForActivity.progress.current.interpolate({inputRange:[0,1-EPSILON,1],outputRange:[1,1,outputValue],extrapolate:'clamp'}):STATE_TRANSITIONING_OR_BELOW_TOP;}const{headerShown=true,headerTransparent,freezeOnBlur,autoHideHomeIndicator}=scene.descriptor.options;const safeAreaInsetTop=insets.top;const safeAreaInsetRight=insets.right;const safeAreaInsetBottom=insets.bottom;const safeAreaInsetLeft=insets.left;const headerHeight=headerShown!==false?headerHeights[route.key]:0;const interpolationIndex=getInterpolationIndex(scenes,index);const isModal=getIsModal(scene,interpolationIndex,isParentModal);const isNextScreenTransparent=scenes[index+1]?.descriptor.options.presentation==='transparentModal';const detachCurrentScreen=scenes[index+1]?.descriptor.options.detachPreviousScreen!==false;return _jsx(MaybeScreen,{style:[StyleSheet.absoluteFill],enabled:detachInactiveScreens,active:isScreenActive,freezeOnBlur:freezeOnBlur,shouldFreeze:isScreenActive===STATE_INACTIVE&&!isPreloaded,homeIndicatorHidden:autoHideHomeIndicator,pointerEvents:\"box-none\",children:_jsx(CardContainer,{index:index,interpolationIndex:interpolationIndex,modal:isModal,active:index===routes.length-1,focused:focused,opening:openingRouteKeys.includes(route.key),closing:closingRouteKeys.includes(route.key),layout:layout,gesture:gesture,scene:scene,safeAreaInsetTop:safeAreaInsetTop,safeAreaInsetRight:safeAreaInsetRight,safeAreaInsetBottom:safeAreaInsetBottom,safeAreaInsetLeft:safeAreaInsetLeft,onGestureStart:onGestureStart,onGestureCancel:onGestureCancel,onGestureEnd:onGestureEnd,headerHeight:headerHeight,isParentHeaderShown:isParentHeaderShown,onHeaderHeightChange:this.handleHeaderLayout,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,hasAbsoluteFloatHeader:isFloatHeaderAbsolute&&!headerTransparent,renderHeader:renderHeader,onOpenRoute:onOpenRoute,onCloseRoute:onCloseRoute,onTransitionStart:onTransitionStart,onTransitionEnd:onTransitionEnd,isNextScreenTransparent:isNextScreenTransparent,detachCurrentScreen:detachCurrentScreen,preloaded:isPreloaded})},route.key);})}),isFloatHeaderAbsolute?floatingHeader:null]});}}const styles=StyleSheet.create({container:{flex:1},absolute:{position:'absolute',top:0,start:0,end:0},floating:{zIndex:1}});","map":{"version":3,"names":["getDefaultHeaderHeight","SafeAreaProviderCompat","React","Animated","Platform","StyleSheet","View","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","BottomSheetAndroid","DefaultTransition","FadeFromBottomAndroid","FadeFromRightAndroid","ModalFadeTransition","ModalSlideFromBottomIOS","ModalTransition","RevealFromBottomAndroid","ScaleFromCenterAndroid","SlideFromLeftIOS","SlideFromRightIOS","findLastIndex","getDistanceForDirection","getModalRouteKeys","MaybeScreen","MaybeScreenContainer","CardContainer","jsx","_jsx","jsxs","_jsxs","NAMED_TRANSITIONS_PRESETS","default","fade","fade_from_bottom","fade_from_right","none","reveal_from_bottom","scale_from_center","slide_from_left","slide_from_right","slide_from_bottom","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModalPresentation","name","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","isRTL","gestureDirection","defaultGestureDirection","presentation","animation","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","routes","descriptors","gestures","preloadedRoutes","preloadedDescriptors","Value","openingRouteKeys","includes","direction","modalRouteKeys","assign","map","self","isPreloaded","previousRoute","undefined","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","excludedPlatforms","isAnimationEnabled","transitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","handleLayout","e","nativeEvent","setState","handleHeaderLayout","previousHeight","getFocusedRoute","getPreviousScene","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","floatingHeader","Fragment","children","mode","onContentHeightChange","styles","floating","absolute","container","enabled","onLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","freezeOnBlur","autoHideHomeIndicator","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","shouldFreeze","homeIndicatorHidden","pointerEvents","modal","opening","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","preloaded","create","flex","position","start","end","zIndex"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx"],"sourcesContent":["import {\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  LocaleDirection,\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  type LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  BottomSheetAndroid,\n  DefaultTransition,\n  FadeFromBottomAndroid,\n  FadeFromRightAndroid,\n  ModalFadeTransition,\n  ModalSlideFromBottomIOS,\n  ModalTransition,\n  RevealFromBottomAndroid,\n  ScaleFromCenterAndroid,\n  SlideFromLeftIOS,\n  SlideFromRightIOS,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackAnimationName,\n  StackCardStyleInterpolator,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\nimport { findLastIndex } from '../../utils/findLastIndex';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getModalRouteKeys } from '../../utils/getModalRoutesKeys';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { CardContainer } from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  direction: LocaleDirection;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  preloadedDescriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid,\n  }),\n} as const satisfies Record<StackAnimationName, TransitionPreset>;\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(\n      layout,\n      descriptor?.options.gestureDirection,\n      isRTL\n    );\n  }\n\n  const defaultGestureDirection =\n    descriptor?.options.presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection;\n\n  const gestureDirection = descriptor?.options.animation\n    ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection\n    : defaultGestureDirection;\n\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor,\n    isRTL\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = [\n      ...props.routes,\n      ...props.state.preloadedRoutes,\n    ].reduce<GestureValues>((acc, curr) => {\n      const descriptor =\n        props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n      const { animation } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          (props.openingRouteKeys.includes(curr.key) && animation !== 'none') ||\n          props.state.preloadedRoutes.includes(curr)\n            ? getDistanceFromOptions(\n                state.layout,\n                descriptor,\n                props.direction === 'rtl'\n              )\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const modalRouteKeys = getModalRouteKeys(\n      [...props.routes, ...props.state.preloadedRoutes],\n      {\n        ...props.descriptors,\n        ...props.preloadedDescriptors,\n      }\n    );\n\n    const scenes = [...props.routes, ...props.state.preloadedRoutes].map(\n      (route, index, self) => {\n        // For preloaded screens, we don't care about the previous and the next screen\n        const isPreloaded = props.state.preloadedRoutes.includes(route);\n        const previousRoute = isPreloaded ? undefined : self[index - 1];\n        const nextRoute = isPreloaded ? undefined : self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          (isPreloaded ? props.preloadedDescriptors : props.descriptors)[\n            route.key\n          ] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          nextRoute &&\n          (props.descriptors[nextRoute?.key] ||\n            state.descriptors[nextRoute?.key]);\n\n        const previousDescriptor =\n          previousRoute &&\n          (props.descriptors[previousRoute?.key] ||\n            state.descriptors[previousRoute?.key]);\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but the majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        // Assume modal if there are already modal screens in the stack\n        // or current screen is a modal when no presentation is specified\n        const isModal = modalRouteKeys.includes(route.key);\n\n        // Disable screen transition animation by default on web, windows and macos to match the native behavior\n        const excludedPlatforms =\n          Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos';\n\n        const animation =\n          optionsForTransitionConfig.animation ??\n          (excludedPlatforms ? 'default' : 'none');\n        const isAnimationEnabled = animation !== 'none';\n\n        const transitionPreset =\n          animation !== 'default'\n            ? NAMED_TRANSITIONS_PRESETS[animation]\n            : isModal || optionsForTransitionConfig.presentation === 'modal'\n              ? ModalTransition\n              : optionsForTransitionConfig.presentation === 'transparentModal'\n                ? ModalFadeTransition\n                : DefaultTransition;\n\n        const {\n          gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n          gestureDirection = transitionPreset.gestureDirection,\n          transitionSpec = transitionPreset.transitionSpec,\n          cardStyleInterpolator = isAnimationEnabled\n            ? transitionPreset.cardStyleInterpolator\n            : forNoAnimationCard,\n          headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            getIsModalPresentation(cardStyleInterpolator),\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            getIsModalPresentation(cardStyleInterpolator)\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const isRTL = props.direction === 'rtl';\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animation,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor,\n              isRTL\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor?.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor,\n                    isRTL\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor,\n                  isRTL\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }\n    );\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      openingRouteKeys,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n            ? i !==\n              findLastIndex(scenes, (scene) => {\n                const { cardStyleInterpolator } = scene.descriptor.options;\n\n                return (\n                  cardStyleInterpolator === forModalPresentationIOS ||\n                  cardStyleInterpolator?.name === 'forModalPresentationIOS'\n                );\n              })\n            : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <View style={styles.container}>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {[...routes, ...state.preloadedRoutes].map((route, index) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n            // It is possible that for a short period the route appears in both arrays.\n            // Particularly, if the screen is removed with `retain`, then it needs a moment to execute the animation.\n            // However, due to the router action, it immediately populates the `preloadedRoutes` array.\n            // Practically, the logic below takes care that it is rendered only once.\n            const isPreloaded =\n              state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (\n              state.preloadedRoutes.includes(route) &&\n              routes.includes(route) &&\n              index >= routes.length\n            ) {\n              return null;\n            }\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 0\n              | 1\n              | 2 = 1;\n\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[routes.length - 1];\n              const outputValue =\n                index === routes.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= routes.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              freezeOnBlur,\n              autoHideHomeIndicator,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={[StyleSheet.absoluteFill]}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                shouldFreeze={isScreenActive === STATE_INACTIVE && !isPreloaded}\n                homeIndicatorHidden={autoHideHomeIndicator}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === routes.length - 1}\n                  focused={focused}\n                  opening={openingRouteKeys.includes(route.key)}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                  preloaded={isPreloaded}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
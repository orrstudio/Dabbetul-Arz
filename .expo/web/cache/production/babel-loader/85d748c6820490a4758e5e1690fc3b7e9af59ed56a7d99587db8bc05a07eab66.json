{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{useFonts}from'expo-font';import{ClockSettingsContext}from'../contexts/ClockSettingsContext';import{jsx as _jsx}from\"react/jsx-runtime\";const DateDisplay=({dateScale=0.05,style})=>{const{clockOpacity,clockColor}=useContext(ClockSettingsContext);const[currentTime,setCurrentTime]=useState(new Date());const[fontsLoaded]=useFonts({'DSEG7Classic-Bold':require('../../assets/fonts/DSEG7Classic-Bold.ttf')});useEffect(()=>{const timer=setInterval(()=>{setCurrentTime(new Date());},1000);return()=>clearInterval(timer);},[]);const{width}=useWindowDimensions();const fontSize=width*dateScale;const formattedDate=currentTime.toLocaleDateString().replace(/\\./g,' . ');if(!fontsLoaded){return _jsx(Text,{children:\"Loading...\"});}return _jsx(View,{style:[styles.container,style],children:_jsx(Text,{style:[styles.dateText,{fontSize,color:clockColor,opacity:clockOpacity*0.8,textAlign:'center'}],children:formattedDate})});};const styles=StyleSheet.create({container:{justifyContent:'center',alignItems:'center'},dateText:{fontFamily:'DSEG7Classic-Bold'}});export default DateDisplay;","map":{"version":3,"names":["React","useState","useEffect","useContext","View","Text","StyleSheet","useWindowDimensions","useFonts","ClockSettingsContext","jsx","_jsx","DateDisplay","dateScale","style","clockOpacity","clockColor","currentTime","setCurrentTime","Date","fontsLoaded","require","timer","setInterval","clearInterval","width","fontSize","formattedDate","toLocaleDateString","replace","children","styles","container","dateText","color","opacity","textAlign","create","justifyContent","alignItems","fontFamily"],"sources":["/home/orr/GitHub/Dabbetul-Arz/src/components/DateDisplay.js"],"sourcesContent":["/**\n * DateDisplay\n * Компонент для отображения текущей даты.\n *\n * @param {Object} props\n * @param {number} [props.dateScale=0.05] - коэффициент для расчёта размера шрифта даты относительно ширины экрана.\n * @param {string} [props.textColor='#00FF00'] - цвет текста.\n * @param {Object} [props.style] - дополнительные стили для контейнера.\n * @returns {JSX.Element} Элемент даты.\n */\nimport React, { useState, useEffect, useContext } from 'react';\nimport { View, Text, StyleSheet, useWindowDimensions } from 'react-native';\nimport { useFonts } from 'expo-font';\nimport { ClockSettingsContext } from '../contexts/ClockSettingsContext';\n\nconst DateDisplay = ({ dateScale = 0.05, style }) => {\n  const { clockOpacity, clockColor } = useContext(ClockSettingsContext);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  const [fontsLoaded] = useFonts({\n    'DSEG7Classic-Bold': require('../../assets/fonts/DSEG7Classic-Bold.ttf'),\n  });\n  \n  useEffect(() => {\n    // Обновляем дату каждый раз (хотя практически она меняется раз в сутки)\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  \n  const { width } = useWindowDimensions();\n  const fontSize = width * dateScale;\n  \n  // Форматируем дату (замена точек на \" . \")\n  const formattedDate = currentTime.toLocaleDateString().replace(/\\./g, ' . ');\n  \n  if (!fontsLoaded) {\n    return <Text>Loading...</Text>;\n  }\n  \n  return (\n    <View style={[styles.container, style]}>\n      <Text style={[styles.dateText, { fontSize, color: clockColor, opacity: clockOpacity * 0.8, textAlign: 'center' }]}>\n        {formattedDate}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    // Центрирование по умолчанию\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  dateText: {\n    fontFamily: 'DSEG7Classic-Bold',\n  },\n});\n\nexport default DateDisplay; "],"mappings":"AAUA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,IAAA,iDAAAC,IAAA,iDAAAC,UAAA,uDAAAC,mBAAA,yDAE/D,OAASC,QAAQ,KAAQ,WAAW,CACpC,OAASC,oBAAoB,KAAQ,kCAAkC,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExE,KAAM,CAAAC,WAAW,CAAGA,CAAC,CAAEC,SAAS,CAAG,IAAI,CAAEC,KAAM,CAAC,GAAK,CACnD,KAAM,CAAEC,YAAY,CAAEC,UAAW,CAAC,CAAGb,UAAU,CAACM,oBAAoB,CAAC,CACrE,KAAM,CAACQ,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAC,GAAI,CAAAkB,IAAI,CAAC,CAAC,CAAC,CAE1D,KAAM,CAACC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,CAC7B,mBAAmB,CAAEa,OAAO,CAAC,0CAA0C,CACzE,CAAC,CAAC,CAEFnB,SAAS,CAAC,IAAM,CAEd,KAAM,CAAAoB,KAAK,CAAGC,WAAW,CAAC,IAAM,CAC9BL,cAAc,CAAC,GAAI,CAAAC,IAAI,CAAC,CAAC,CAAC,CAC5B,CAAC,CAAE,IAAI,CAAC,CACR,MAAO,IAAMK,aAAa,CAACF,KAAK,CAAC,CACnC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAEG,KAAM,CAAC,CAAGlB,mBAAmB,CAAC,CAAC,CACvC,KAAM,CAAAmB,QAAQ,CAAGD,KAAK,CAAGZ,SAAS,CAGlC,KAAM,CAAAc,aAAa,CAAGV,WAAW,CAACW,kBAAkB,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAE,KAAK,CAAC,CAE5E,GAAI,CAACT,WAAW,CAAE,CAChB,MAAO,CAAAT,IAAA,CAACN,IAAI,EAAAyB,QAAA,CAAC,YAAU,CAAM,CAAC,CAChC,CAEA,MACE,CAAAnB,IAAA,CAACP,IAAI,EAACU,KAAK,CAAE,CAACiB,MAAM,CAACC,SAAS,CAAElB,KAAK,CAAE,CAAAgB,QAAA,CACrCnB,IAAA,CAACN,IAAI,EAACS,KAAK,CAAE,CAACiB,MAAM,CAACE,QAAQ,CAAE,CAAEP,QAAQ,CAAEQ,KAAK,CAAElB,UAAU,CAAEmB,OAAO,CAAEpB,YAAY,CAAG,GAAG,CAAEqB,SAAS,CAAE,QAAS,CAAC,CAAE,CAAAN,QAAA,CAC/GH,aAAa,CACV,CAAC,CACH,CAAC,CAEX,CAAC,CAED,KAAM,CAAAI,MAAM,CAAGzB,UAAU,CAAC+B,MAAM,CAAC,CAC/BL,SAAS,CAAE,CAETM,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QACd,CAAC,CACDN,QAAQ,CAAE,CACRO,UAAU,CAAE,mBACd,CACF,CAAC,CAAC,CAEF,cAAe,CAAA5B,WAAW","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
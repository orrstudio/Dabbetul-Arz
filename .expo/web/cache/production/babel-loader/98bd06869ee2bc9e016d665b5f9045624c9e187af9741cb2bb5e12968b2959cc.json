{"ast":null,"code":"import{useEffect,useState}from'react';import{loadAsync,isLoaded}from'./Font';function isMapLoaded(map){if(typeof map==='string'){return isLoaded(map);}else{return Object.keys(map).every(fontFamily=>isLoaded(fontFamily));}}function useRuntimeFonts(map){const[loaded,setLoaded]=useState(isMapLoaded(map));const[error,setError]=useState(null);useEffect(()=>{let isMounted=true;loadAsync(map).then(()=>{if(isMounted){setLoaded(true);}}).catch(error=>{if(isMounted){setError(error);}});return()=>{isMounted=false;};},[]);return[loaded,error];}function useStaticFonts(map){loadAsync(map);return[true,null];}export const useFonts=false?useStaticFonts:useRuntimeFonts;","map":{"version":3,"names":["useEffect","useState","loadAsync","isLoaded","isMapLoaded","map","Object","keys","every","fontFamily","useRuntimeFonts","loaded","setLoaded","error","setError","isMounted","then","catch","useStaticFonts","useFonts"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-font/src/FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    loadAsync(map)\n      .then(() => {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      })\n      .catch((error) => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n *\n * @example\n * ```tsx\n * const [loaded, error] = useFonts({ ... });\n * ```\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAASC,SAAS,CAAEC,QAAQ,KAAQ,QAAQ,CAG5C,QAAS,CAAAC,WAAWA,CAACC,GAAwC,EAC3D,GAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CAC3B,MAAO,CAAAF,QAAQ,CAACE,GAAG,CAAC,C,CACrB,IAAM,CACL,MAAO,CAAAC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,KAAK,CAAEC,UAAU,EAAKN,QAAQ,CAACM,UAAU,CAAC,CAAC,C,CAEvE,CAEA,QAAS,CAAAC,eAAeA,CAACL,GAAwC,EAC/D,KAAM,CAACM,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAGlCG,WAAW,CAACC,GAAG,CAAC,CACjB,CACD,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAe,IAAI,CAAC,CAEtDD,SAAS,CAAC,IAAK,CACb,GAAI,CAAAe,SAAS,CAAG,IAAI,CAEpBb,SAAS,CAACG,GAAG,CAAC,CACXW,IAAI,CAAC,IAAK,CACT,GAAID,SAAS,CAAE,CACbH,SAAS,CAAC,IAAI,CAAC,C,CAEnB,CAAC,CAAC,CACDK,KAAK,CAAEJ,KAAK,EAAI,CACf,GAAIE,SAAS,CAAE,CACbD,QAAQ,CAACD,KAAK,CAAC,C,CAEnB,CAAC,CAAC,CAEJ,MAAO,IAAK,CACVE,SAAS,CAAG,KAAK,CACnB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACJ,MAAM,CAAEE,KAAK,CAAC,CACxB,CAEA,QAAS,CAAAK,cAAcA,CAACb,GAAwC,EAC9DH,SAAS,CAACG,GAAG,CAAC,CACd,MAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACrB,CAsBA,MAAO,MAAM,CAAAc,QAAQ,CACnB,MAAgCD,cAAc,CAAGR,eAAe","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{Platform,UnavailabilityError}from'expo-modules-core';import{useEffect,useState}from'react';import processColor from\"react-native-web/dist/exports/processColor\";import ExpoNavigationBar from'./ExpoNavigationBar';export function addVisibilityListener(listener){if(!ExpoNavigationBar.addListener){throw new UnavailabilityError('NavigationBar','addVisibilityListener');}return ExpoNavigationBar.addListener('ExpoNavigationBar.didChange',listener);}export async function setBackgroundColorAsync(color){if(true){console.warn('`setBackgroundColorAsync` is only available on Android');return;}const colorNumber=processColor(color);return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);}export async function getBackgroundColorAsync(){if(true){console.warn('`getBackgroundColorAsync` is only available on Android');return`#00000000`;}return await ExpoNavigationBar.getBackgroundColorAsync();}export async function setBorderColorAsync(color){if(true){console.warn('`setBorderColorAsync` is only available on Android');return;}const colorNumber=processColor(color);await ExpoNavigationBar.setBorderColorAsync(colorNumber);}export async function getBorderColorAsync(){if(true){console.warn('`getBorderColorAsync` is only available on Android');return`#00000000`;}return await ExpoNavigationBar.getBorderColorAsync();}export async function setVisibilityAsync(visibility){if(true){console.warn('`setVisibilityAsync` is only available on Android');return;}await ExpoNavigationBar.setVisibilityAsync(visibility);}export async function getVisibilityAsync(){if(true){console.warn('`getVisibilityAsync` is only available on Android');return'hidden';}return ExpoNavigationBar.getVisibilityAsync();}export async function setButtonStyleAsync(style){if(true){console.warn('`setButtonStyleAsync` is only available on Android');return;}await ExpoNavigationBar.setButtonStyleAsync(style);}export async function getButtonStyleAsync(){if(true){console.warn('`getButtonStyleAsync` is only available on Android');return'light';}return await ExpoNavigationBar.getButtonStyleAsync();}export async function setPositionAsync(position){if(true){console.warn('`setPositionAsync` is only available on Android');return;}await ExpoNavigationBar.setPositionAsync(position);}export async function unstable_getPositionAsync(){if(true){console.warn('`unstable_getPositionAsync` is only available on Android');return'relative';}return await ExpoNavigationBar.unstable_getPositionAsync();}export async function setBehaviorAsync(behavior){if(true){console.warn('`setBehaviorAsync` is only available on Android');return;}return await ExpoNavigationBar.setBehaviorAsync(behavior);}export async function getBehaviorAsync(){if(true){console.warn('`getBehaviorAsync` is only available on Android');return'inset-touch';}return await ExpoNavigationBar.getBehaviorAsync();}export function useVisibility(){const[visibility,setVisible]=useState(null);useEffect(()=>{let isMounted=true;if(true){setVisible('hidden');return;}getVisibilityAsync().then(visibility=>{if(isMounted){setVisible(visibility);}});const listener=addVisibilityListener(({visibility})=>{if(isMounted){setVisible(visibility);}});return()=>{listener.remove();isMounted=false;};},[]);return visibility;}export*from'./NavigationBar.types';","map":{"version":3,"names":["Platform","UnavailabilityError","useEffect","useState","processColor","ExpoNavigationBar","addVisibilityListener","listener","addListener","setBackgroundColorAsync","color","console","warn","colorNumber","getBackgroundColorAsync","setBorderColorAsync","getBorderColorAsync","setVisibilityAsync","visibility","getVisibilityAsync","setButtonStyleAsync","style","getButtonStyleAsync","setPositionAsync","position","unstable_getPositionAsync","setBehaviorAsync","behavior","getBehaviorAsync","useVisibility","setVisible","isMounted","then","remove"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-navigation-bar/src/NavigationBar.ts"],"sourcesContent":["import { Platform, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { processColor } from 'react-native';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport {\n  NavigationBarButtonStyle,\n  NavigationBarBehavior,\n  NavigationBarPosition,\n  NavigationBarVisibility,\n  NavigationBarVisibilityEvent,\n} from './NavigationBar.types';\n\n/**\n * Observe changes to the system navigation bar.\n * Due to platform constraints, this callback will also be triggered when the status bar visibility changes.\n *\n * @example\n * ```ts\n * NavigationBar.addVisibilityListener(({ visibility }) => {\n *   // ...\n * });\n * ```\n */\nexport function addVisibilityListener(\n  listener: (event: NavigationBarVisibilityEvent) => void\n): EventSubscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n  return ExpoNavigationBar.addListener('ExpoNavigationBar.didChange', listener);\n}\n\n/**\n * Changes the navigation bar's background color.\n *\n * @example\n * ```ts\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBackgroundColorAsync(color: string): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBackgroundColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's background color.\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n * @returns Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBackgroundColorAsync(): Promise<string> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBackgroundColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @example\n * ```ts\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBorderColorAsync(color: string): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBorderColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's top border color, also known as the \"divider color\".\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n * @returns Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBorderColorAsync(): Promise<string> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBorderColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @example\n * ```ts\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n * @param visibility Based on CSS visibility property.\n */\nexport async function setVisibilityAsync(visibility: NavigationBarVisibility): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setVisibilityAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setVisibilityAsync(visibility);\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @example\n * ```ts\n * const visibility = await NavigationBar.getVisibilityAsync(\"hidden\");\n * ```\n * @returns Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).\n */\nexport async function getVisibilityAsync(): Promise<NavigationBarVisibility> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getVisibilityAsync` is only available on Android');\n    return 'hidden';\n  }\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).\n *\n * @example\n * ```ts\n * NavigationBar.setButtonStyleAsync(\"light\");\n * ```\n * @param style Dictates the color of the foreground element color.\n */\nexport async function setButtonStyleAsync(style: NavigationBarButtonStyle): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setButtonStyleAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setButtonStyleAsync(style);\n}\n\n/**\n * Gets the navigation bar's button color styles.\n *\n * @example\n * ```ts\n * const style = await NavigationBar.getButtonStyleAsync();\n * ```\n * @returns Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).\n */\nexport async function getButtonStyleAsync(): Promise<NavigationBarButtonStyle> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getButtonStyleAsync` is only available on Android');\n    return 'light';\n  }\n  return await ExpoNavigationBar.getButtonStyleAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * await NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * await NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n * @param position Based on CSS position property.\n */\nexport async function setPositionAsync(position: NavigationBarPosition): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setPositionAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setPositionAsync(position);\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n * This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.\n *\n * This method is unstable because the position can be set via another native module and get out of sync.\n * Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.\n *\n * @example\n * ```ts\n * await NavigationBar.unstable_getPositionAsync()\n * ```\n * @returns Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).\n */\nexport async function unstable_getPositionAsync(): Promise<NavigationBarPosition> {\n  if (Platform.OS !== 'android') {\n    console.warn('`unstable_getPositionAsync` is only available on Android');\n    return 'relative';\n  }\n  return await ExpoNavigationBar.unstable_getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * - `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * - `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * - `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @example\n * ```ts\n * await NavigationBar.setBehaviorAsync('overlay-swipe')\n * ```\n * @param behavior Dictates the interaction behavior of the navigation bar.\n */\nexport async function setBehaviorAsync(behavior: NavigationBarBehavior): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBehaviorAsync` is only available on Android');\n    return;\n  }\n  return await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @example\n * ```ts\n * await NavigationBar.getBehaviorAsync()\n * ```\n * @returns Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).\n */\nexport async function getBehaviorAsync(): Promise<NavigationBarBehavior> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBehaviorAsync` is only available on Android');\n    return 'inset-touch';\n  }\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\n/**\n * React hook that statefully updates with the visibility of the system navigation bar.\n *\n * @example\n * ```ts\n * function App() {\n *   const visibility = NavigationBar.useVisibility()\n *   // React Component...\n * }\n * ```\n * @returns Visibility of the navigation bar, `null` during async initialization.\n */\nexport function useVisibility(): NavigationBarVisibility | null {\n  const [visibility, setVisible] = useState<NavigationBarVisibility | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n\nexport * from './NavigationBar.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
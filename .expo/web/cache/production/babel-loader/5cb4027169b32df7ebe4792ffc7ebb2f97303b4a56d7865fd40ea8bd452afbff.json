{"ast":null,"code":"\"use strict\";import{nanoid}from'nanoid/non-secure';import{BaseRouter}from\"./BaseRouter.js\";export const StackActions={replace(name,params){return{type:'REPLACE',payload:{name,params}};},push(name,params){return{type:'PUSH',payload:{name,params}};},pop(count=1){return{type:'POP',payload:{count}};},popToTop(){return{type:'POP_TO_TOP'};},popTo(name,params,merge){return{type:'POP_TO',payload:{name,params,merge}};}};export function StackRouter(options){const router=Object.assign({},BaseRouter,{type:'stack',getInitialState({routeNames,routeParamList}){const initialRouteName=options.initialRouteName!==undefined&&routeNames.includes(options.initialRouteName)?options.initialRouteName:routeNames[0];return{stale:false,type:'stack',key:`stack-${nanoid()}`,index:0,routeNames,preloadedRoutes:[],routes:[{key:`${initialRouteName}-${nanoid()}`,name:initialRouteName,params:routeParamList[initialRouteName]}]};},getRehydratedState(partialState,{routeNames,routeParamList}){const state=partialState;if(state.stale===false){return state;}const routes=state.routes.filter(route=>routeNames.includes(route.name)).map(route=>Object.assign({},route,{key:route.key||`${route.name}-${nanoid()}`,params:routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],route.params):route.params}));const preloadedRoutes=state.preloadedRoutes?.filter(route=>routeNames.includes(route.name)).map(route=>Object.assign({},route,{key:route.key||`${route.name}-${nanoid()}`,params:routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],route.params):route.params}))??[];if(routes.length===0){const initialRouteName=options.initialRouteName!==undefined?options.initialRouteName:routeNames[0];routes.push({key:`${initialRouteName}-${nanoid()}`,name:initialRouteName,params:routeParamList[initialRouteName]});}return{stale:false,type:'stack',key:`stack-${nanoid()}`,index:routes.length-1,routeNames,routes,preloadedRoutes};},getStateForRouteNamesChange(state,{routeNames,routeParamList,routeKeyChanges}){const routes=state.routes.filter(route=>routeNames.includes(route.name)&&!routeKeyChanges.includes(route.name));if(routes.length===0){const initialRouteName=options.initialRouteName!==undefined&&routeNames.includes(options.initialRouteName)?options.initialRouteName:routeNames[0];routes.push({key:`${initialRouteName}-${nanoid()}`,name:initialRouteName,params:routeParamList[initialRouteName]});}return Object.assign({},state,{routeNames,routes,index:Math.min(state.index,routes.length-1)});},getStateForRouteFocus(state,key){const index=state.routes.findIndex(r=>r.key===key);if(index===-1||index===state.index){return state;}return Object.assign({},state,{index,routes:state.routes.slice(0,index+1)});},getStateForAction(state,action,options){const{routeParamList}=options;switch(action.type){case'REPLACE':{const index=action.target===state.key&&action.source?state.routes.findIndex(r=>r.key===action.source):state.index;if(index===-1){return null;}const{name,params}=action.payload;if(!state.routeNames.includes(name)){return null;}return Object.assign({},state,{routes:state.routes.map((route,i)=>i===index?{key:`${name}-${nanoid()}`,name,params:routeParamList[name]!==undefined?Object.assign({},routeParamList[name],params):params}:route)});}case'PUSH':case'NAVIGATE':{if(!state.routeNames.includes(action.payload.name)){return null;}const getId=options.routeGetIdList[action.payload.name];const id=getId?.({params:action.payload.params});let route;if(id!==undefined){route=state.routes.find(route=>route.name===action.payload.name&&id===getId?.({params:route.params}));}else{const currentRoute=state.routes[state.index];if(action.type==='NAVIGATE'&&action.payload.name===currentRoute.name){route=currentRoute;}}if(!route){route=state.preloadedRoutes.find(route=>route.name===action.payload.name&&id===getId?.({params:route.params}));}let params;if(action.type==='NAVIGATE'&&action.payload.merge&&route){params=action.payload.params!==undefined||routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],route.params,action.payload.params):route.params;}else{params=routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],action.payload.params):action.payload.params;}let routes;if(route){const routeKey=route.key;routes=state.routes.filter(r=>r.key!==routeKey);routes.push(Object.assign({},route,{path:action.type==='NAVIGATE'&&action.payload.path!==undefined?action.payload.path:route.path,params}));}else{routes=[...state.routes,{key:`${action.payload.name}-${nanoid()}`,name:action.payload.name,path:action.type==='NAVIGATE'?action.payload.path:undefined,params}];}return Object.assign({},state,{index:routes.length-1,preloadedRoutes:state.preloadedRoutes.filter(route=>routes[routes.length-1].key!==route.key),routes});}case'NAVIGATE_DEPRECATED':{if(state.preloadedRoutes.find(route=>route.name===action.payload.name&&id===getId?.({params:route.params}))){return null;}if(!state.routeNames.includes(action.payload.name)){return null;}let index=-1;const getId=options.routeGetIdList[action.payload.name];const id=getId?.({params:action.payload.params});if(id){index=state.routes.findIndex(route=>route.name===action.payload.name&&id===getId?.({params:route.params}));}else if(state.routes[state.index].name===action.payload.name){index=state.index;}else{for(let i=state.routes.length-1;i>=0;i--){if(state.routes[i].name===action.payload.name){index=i;break;}}}if(index===-1){const routes=[...state.routes,{key:`${action.payload.name}-${nanoid()}`,name:action.payload.name,params:routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],action.payload.params):action.payload.params}];return Object.assign({},state,{routes,index:routes.length-1});}const route=state.routes[index];let params;if(action.payload.merge){params=action.payload.params!==undefined||routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],route.params,action.payload.params):route.params;}else{params=routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],action.payload.params):action.payload.params;}return Object.assign({},state,{index,routes:[...state.routes.slice(0,index),params!==route.params?Object.assign({},route,{params}):state.routes[index]]});}case'POP':{const index=action.target===state.key&&action.source?state.routes.findIndex(r=>r.key===action.source):state.index;if(index>0){const count=Math.max(index-action.payload.count+1,1);const routes=state.routes.slice(0,count).concat(state.routes.slice(index+1));return Object.assign({},state,{index:routes.length-1,routes});}return null;}case'POP_TO_TOP':return router.getStateForAction(state,{type:'POP',payload:{count:state.routes.length-1}},options);case'POP_TO':{if(!state.routeNames.includes(action.payload.name)){return null;}let index=-1;const getId=options.routeGetIdList[action.payload.name];const id=getId?.({params:action.payload.params});if(id){index=state.routes.findIndex(route=>route.name===action.payload.name&&id===getId?.({params:route.params}));}else if(state.routes[state.index].name===action.payload.name){index=state.index;}else{for(let i=state.routes.length-1;i>=0;i--){if(state.routes[i].name===action.payload.name){index=i;break;}}}if(index===-1){const routes=[...state.routes.slice(0,-1),{key:`${action.payload.name}-${nanoid()}`,name:action.payload.name,params:routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],action.payload.params):action.payload.params}];return Object.assign({},state,{routes,index:routes.length-1});}const route=state.routes[index];let params;if(action.payload.merge){params=action.payload.params!==undefined||routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],route.params,action.payload.params):route.params;}else{params=routeParamList[route.name]!==undefined?Object.assign({},routeParamList[route.name],action.payload.params):action.payload.params;}return Object.assign({},state,{index,routes:[...state.routes.slice(0,index),params!==route.params?Object.assign({},route,{params}):state.routes[index]]});}case'GO_BACK':if(state.index>0){return router.getStateForAction(state,{type:'POP',payload:{count:1},target:action.target,source:action.source},options);}return null;case'PRELOAD':{const getId=options.routeGetIdList[action.payload.name];const id=getId?.({params:action.payload.params});let route;if(id!==undefined){route=state.routes.find(route=>route.name===action.payload.name&&id===getId?.({params:route.params}));}if(route){return Object.assign({},state,{routes:state.routes.map(r=>{if(r.key!==route?.key){return r;}return Object.assign({},r,{params:routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],action.payload.params):action.payload.params});})});}else{return Object.assign({},state,{preloadedRoutes:state.preloadedRoutes.filter(r=>r.name!==action.payload.name||id!==getId?.({params:r.params})).concat({key:`${action.payload.name}-${nanoid()}`,name:action.payload.name,params:routeParamList[action.payload.name]!==undefined?Object.assign({},routeParamList[action.payload.name],action.payload.params):action.payload.params})});}}default:return BaseRouter.getStateForAction(state,action);}},actionCreators:StackActions});return router;}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","popTo","merge","StackRouter","options","router","Object","assign","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","preloadedRoutes","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","currentRoute","routeKey","path","max","concat","actionCreators"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/@react-navigation/routers/src/StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport { BaseRouter } from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationRoute,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO';\n      payload: {\n        name: string;\n        params?: object;\n        merge?: boolean;\n      };\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n    /**\n     * List of routes, which are supposed to be preloaded before navigating to.\n     */\n    preloadedRoutes: NavigationRoute<ParamList, keyof ParamList>[];\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? [screen: Screen] | [screen: Screen, params: ParamList[Screen]]\n        : [screen: Screen, params: ParamList[Screen]];\n    }[RouteName]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route to push onto the stack.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? [screen: Screen] | [screen: Screen, params: ParamList[Screen]]\n        : [screen: Screen, params: ParamList[Screen]];\n    }[RouteName]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n\n  /**\n   * Pop any screens to go back to the specified screen.\n   * If the specified screen doesn't exist, it'll be added to the stack.\n   *\n   * @param name Name of the route to navigate to.\n   * @param [params] Params object for the route.\n   * @param [merge] Whether to merge the params onto the route.\n   */\n  popTo<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ?\n            | [screen: Screen]\n            | [screen: Screen, params: ParamList[Screen]]\n            | [screen: Screen, params: ParamList[Screen], merge: boolean]\n        :\n            | [screen: Screen, params: ParamList[Screen]]\n            | [screen: Screen, params: ParamList[Screen], merge: boolean];\n    }[RouteName]\n  ): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n  popTo(name: string, params?: object, merge?: boolean): StackActionType {\n    return { type: 'POP_TO', payload: { name, params, merge } };\n  },\n};\n\nexport function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        preloadedRoutes: [],\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      const state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map((route) => ({\n          ...route,\n          key: route.key || `${route.name}-${nanoid()}`,\n          params:\n            routeParamList[route.name] !== undefined\n              ? {\n                  ...routeParamList[route.name],\n                  ...route.params,\n                }\n              : route.params,\n        }));\n\n      const preloadedRoutes =\n        state.preloadedRoutes\n          ?.filter((route) => routeNames.includes(route.name))\n          .map(\n            (route) =>\n              ({\n                ...route,\n                key: route.key || `${route.name}-${nanoid()}`,\n                params:\n                  routeParamList[route.name] !== undefined\n                    ? {\n                        ...routeParamList[route.name],\n                        ...route.params,\n                      }\n                    : route.params,\n              }) as Route<string>\n          ) ?? [];\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n        preloadedRoutes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n        case 'NAVIGATE': {\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          let route: Route<string> | undefined;\n\n          if (id !== undefined) {\n            route = state.routes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else {\n            const currentRoute = state.routes[state.index];\n\n            // If the route matches the current one, then navigate to it\n            if (\n              action.type === 'NAVIGATE' &&\n              action.payload.name === currentRoute.name\n            ) {\n              route = currentRoute;\n            }\n          }\n\n          if (!route) {\n            route = state.preloadedRoutes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          }\n\n          let params;\n\n          if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[action.payload.name] !== undefined\n                ? {\n                    ...routeParamList[action.payload.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[action.payload.name] !== undefined\n                ? {\n                    ...routeParamList[action.payload.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          let routes: Route<string>[];\n\n          if (route) {\n            const routeKey = route.key;\n\n            routes = state.routes.filter((r) => r.key !== routeKey);\n            routes.push({\n              ...route,\n              path:\n                action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  ? action.payload.path\n                  : route.path,\n              params,\n            });\n          } else {\n            routes = [\n              ...state.routes,\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path:\n                  action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                params,\n              },\n            ];\n          }\n\n          return {\n            ...state,\n            index: routes.length - 1,\n            preloadedRoutes: state.preloadedRoutes.filter(\n              (route) => routes[routes.length - 1].key !== route.key\n            ),\n            routes,\n          };\n        }\n\n        case 'NAVIGATE_DEPRECATED': {\n          if (\n            state.preloadedRoutes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            )\n          ) {\n            return null;\n          }\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          // If the route already exists, navigate to that\n          let index = -1;\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          if (id) {\n            index = state.routes.findIndex(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else if (state.routes[state.index].name === action.payload.name) {\n            index = state.index;\n          } else {\n            for (let i = state.routes.length - 1; i >= 0; i--) {\n              if (state.routes[i].name === action.payload.name) {\n                index = i;\n                break;\n              }\n            }\n          }\n\n          if (index === -1) {\n            const routes = [\n              ...state.routes,\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              },\n            ];\n\n            return {\n              ...state,\n              routes,\n              index: routes.length - 1,\n            };\n          }\n\n          const route = state.routes[index];\n\n          let params;\n\n          if (action.payload.merge) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          return {\n            ...state,\n            index,\n            routes: [\n              ...state.routes.slice(0, index),\n              params !== route.params\n                ? { ...route, params }\n                : state.routes[index],\n            ],\n          };\n        }\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'POP_TO': {\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          // If the route already exists, navigate to that\n          let index = -1;\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          if (id) {\n            index = state.routes.findIndex(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else if (state.routes[state.index].name === action.payload.name) {\n            index = state.index;\n          } else {\n            for (let i = state.routes.length - 1; i >= 0; i--) {\n              if (state.routes[i].name === action.payload.name) {\n                index = i;\n                break;\n              }\n            }\n          }\n\n          // If the route doesn't exist, remove the current route and add the new one\n          if (index === -1) {\n            const routes = [\n              ...state.routes.slice(0, -1),\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              },\n            ];\n\n            return {\n              ...state,\n              routes,\n              index: routes.length - 1,\n            };\n          }\n\n          const route = state.routes[index];\n\n          let params;\n\n          if (action.payload.merge) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          return {\n            ...state,\n            index,\n            routes: [\n              ...state.routes.slice(0, index),\n              params !== route.params\n                ? { ...route, params }\n                : state.routes[index],\n            ],\n          };\n        }\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        case 'PRELOAD': {\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          let route: Route<string> | undefined;\n\n          if (id !== undefined) {\n            route = state.routes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          }\n\n          if (route) {\n            return {\n              ...state,\n              routes: state.routes.map((r) => {\n                if (r.key !== route?.key) {\n                  return r;\n                }\n                return {\n                  ...r,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                };\n              }),\n            };\n          } else {\n            return {\n              ...state,\n              preloadedRoutes: state.preloadedRoutes\n                .filter(\n                  (r) =>\n                    r.name !== action.payload.name ||\n                    id !== getId?.({ params: r.params })\n                )\n                .concat({\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                }),\n            };\n          }\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
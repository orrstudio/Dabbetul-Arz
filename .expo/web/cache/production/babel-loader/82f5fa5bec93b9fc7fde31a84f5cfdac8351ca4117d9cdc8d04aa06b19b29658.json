{"ast":null,"code":"import*as Font from'expo-font';import React from'react';import Text from\"react-native-web/dist/exports/Text\";import createIconSet from'./vendor/react-native-vector-icons/lib/create-icon-set';import createIconButtonComponent from'./vendor/react-native-vector-icons/lib/icon-button';import{jsx as _jsx}from\"react/jsx-runtime\";export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from'./vendor/react-native-vector-icons/lib/create-icon-set';export default function(glyphMap,fontName,expoAssetId,fontStyle){const font={[fontName]:expoAssetId};const RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return class Icon extends React.Component{static defaultProps=RNVIconComponent.defaultProps;static Button=createIconButtonComponent(Icon);static glyphMap=glyphMap;static getRawGlyphMap=()=>glyphMap;static getFontFamily=()=>fontName;static loadFont=()=>Font.loadAsync(font);static font=font;_mounted=false;state={fontIsLoaded:Font.isLoaded(fontName)};async componentDidMount(){this._mounted=true;if(!this.state.fontIsLoaded){await Font.loadAsync(font);this._mounted&&this.setState({fontIsLoaded:true});}}componentWillUnmount(){this._mounted=false;}setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}render(){if(false&&this.props.name&&!(this.props.name in glyphMap)){console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);}if(!this.state.fontIsLoaded){return _jsx(Text,{});}return _jsx(RNVIconComponent,Object.assign({ref:view=>{this._icon=view;}},this.props));}};}","map":{"version":3,"names":["Font","React","Text","createIconSet","createIconButtonComponent","jsx","_jsx","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","Icon","Component","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont","loadAsync","_mounted","state","fontIsLoaded","isLoaded","componentDidMount","setState","componentWillUnmount","setNativeProps","props","_icon","render","name","console","warn","Object","assign","ref","view"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/@expo/vector-icons/src/createIconSet.tsx"],"sourcesContent":["import * as Font from 'expo-font';\nimport React, { ComponentClass } from 'react';\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './vendor/react-native-vector-icons/lib/create-icon-set';\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        /* eslint-disable react/no-did-mount-set-state */\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,IAAI,KAAM,WAAW,CACjC,MAAO,CAAAC,KAAyB,KAAM,OAAO,CAAC,OAAAC,IAAA,0CAW9C,MAAO,CAAAC,aAAa,KAAM,wDAAwD,CAClF,MAAO,CAAAC,yBAAyB,KAAM,oDAAoD,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3F,OACEC,kBAAkB,CAClBC,iBAAiB,KACZ,wDAAwD,CAoF/D,cAAc,UACZC,QAAqB,CACrBC,QAAY,CACZC,WAAW,CACXC,SAAe,EAEf,KAAM,CAAAC,IAAI,CAAG,CAAE,CAACH,QAAQ,EAAGC,WAAW,CAAE,CACxC,KAAM,CAAAG,gBAAgB,CAAGX,aAAa,CAACM,QAAQ,CAAEC,QAAQ,CAAE,IAAI,CAAEE,SAAS,CAAC,CAE3E,MAAO,MAAM,CAAAG,IAAK,QAAQ,CAAAd,KAAK,CAACe,SAAuB,CACrD,MAAO,CAAAC,YAAY,CAAGH,gBAAgB,CAACG,YAAY,CACnD,MAAO,CAAAC,MAAM,CAAGd,yBAAyB,CAACW,IAAI,CAAC,CAC/C,MAAO,CAAAN,QAAQ,CAAGA,QAAQ,CAC1B,MAAO,CAAAU,cAAc,CAAGA,CAAA,GAAMV,QAAQ,CACtC,MAAO,CAAAW,aAAa,CAAGA,CAAA,GAAMV,QAAQ,CACrC,MAAO,CAAAW,QAAQ,CAAGA,CAAA,GAAMrB,IAAI,CAACsB,SAAS,CAACT,IAAI,CAAC,CAC5C,MAAO,CAAAA,IAAI,CAAGA,IAAI,CAElBU,QAAQ,CAAG,KAAK,CAGhBC,KAAK,CAAG,CACNC,YAAY,CAAEzB,IAAI,CAAC0B,QAAQ,CAAChB,QAAQ,C,CACrC,CAED,KAAM,CAAAiB,iBAAiBA,CAAA,EACrB,IAAI,CAACJ,QAAQ,CAAG,IAAI,CACpB,GAAI,CAAC,IAAI,CAACC,KAAK,CAACC,YAAY,CAAE,CAC5B,KAAM,CAAAzB,IAAI,CAACsB,SAAS,CAACT,IAAI,CAAC,CAE1B,IAAI,CAACU,QAAQ,EAAI,IAAI,CAACK,QAAQ,CAAC,CAAEH,YAAY,CAAE,IAAI,CAAE,CAAC,CACxD,CACF,CAEAI,oBAAoBA,CAAA,EAClB,IAAI,CAACN,QAAQ,CAAG,KAAK,CACvB,CAEAO,cAAcA,CAACC,KAAK,EAClB,GAAI,IAAI,CAACC,KAAK,CAAE,CACd,IAAI,CAACA,KAAK,CAACF,cAAc,CAACC,KAAK,CAAC,CAClC,CACF,CAEAE,MAAMA,CAAA,EACJ,GAAI,OAAW,IAAI,CAACF,KAAK,CAACG,IAAI,EAAI,EAAE,IAAI,CAACH,KAAK,CAACG,IAAI,GAAI,CAAAzB,QAAQ,CAAC,CAAE,CAChE0B,OAAO,CAACC,IAAI,CAAC,IAAI,IAAI,CAACL,KAAK,CAACG,IAAI,0CAA0CxB,QAAQ,GAAG,CAAC,CACxF,CAEA,GAAI,CAAC,IAAI,CAACc,KAAK,CAACC,YAAY,CAAE,CAC5B,MAAO,CAAAnB,IAAA,CAACJ,IAAI,IAAG,CACjB,CAEA,MACE,CAAAI,IAAA,CAACQ,gBAAgB,CAAAuB,MAAA,CAAAC,MAAA,EACfC,GAAG,CAAGC,IAAI,EAAI,CACZ,IAAI,CAACR,KAAK,CAAGQ,IAAI,CACnB,CAAE,EACE,IAAI,CAACT,KAAK,CAAC,CACf,CAEN,C,CACD,CACH","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
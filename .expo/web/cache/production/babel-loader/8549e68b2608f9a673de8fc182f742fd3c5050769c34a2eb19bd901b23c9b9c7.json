{"ast":null,"code":"import{Platform,UnavailabilityError}from'expo-modules-core';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import ExpoScreenOrientation from'./ExpoScreenOrientation';import{Orientation,OrientationLock,WebOrientationLock,WebOrientation,SizeClassIOS}from'./ScreenOrientation.types';export{Orientation,OrientationLock,WebOrientationLock,WebOrientation,SizeClassIOS};let _orientationChangeSubscribers=[];let _lastOrientationLock=OrientationLock.UNKNOWN;export async function lockAsync(orientationLock){if(!ExpoScreenOrientation.lockAsync){throw new UnavailabilityError('ScreenOrientation','lockAsync');}const orientationLocks=Object.values(OrientationLock);if(!orientationLocks.includes(orientationLock)){throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);}if(orientationLock===OrientationLock.OTHER){return;}await ExpoScreenOrientation.lockAsync(orientationLock);_lastOrientationLock=orientationLock;}export async function lockPlatformAsync(options){if(!ExpoScreenOrientation.lockPlatformAsync){throw new UnavailabilityError('ScreenOrientation','lockPlatformAsync');}const{screenOrientationConstantAndroid,screenOrientationArrayIOS,screenOrientationLockWeb}=options;let platformOrientationParam;if(false&&screenOrientationConstantAndroid){if(isNaN(screenOrientationConstantAndroid)){throw new TypeError(`lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`);}platformOrientationParam=screenOrientationConstantAndroid;}else if(false&&screenOrientationArrayIOS){if(!Array.isArray(screenOrientationArrayIOS)){throw new TypeError(`lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`);}const orientations=Object.values(Orientation);for(const orientation of screenOrientationArrayIOS){if(!orientations.includes(orientation)){throw new TypeError(`lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`);}}platformOrientationParam=screenOrientationArrayIOS;}else if(true&&screenOrientationLockWeb){const webOrientationLocks=Object.values(WebOrientationLock);if(!webOrientationLocks.includes(screenOrientationLockWeb)){throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);}platformOrientationParam=screenOrientationLockWeb;}if(!platformOrientationParam){throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');}await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);_lastOrientationLock=OrientationLock.OTHER;}export async function unlockAsync(){if(!ExpoScreenOrientation.lockAsync){throw new UnavailabilityError('ScreenOrientation','lockAsync');}await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);}export async function getOrientationAsync(){if(!ExpoScreenOrientation.getOrientationAsync){throw new UnavailabilityError('ScreenOrientation','getOrientationAsync');}return await ExpoScreenOrientation.getOrientationAsync();}export async function getOrientationLockAsync(){if(!ExpoScreenOrientation.getOrientationLockAsync){return _lastOrientationLock;}return await ExpoScreenOrientation.getOrientationLockAsync();}export async function getPlatformOrientationLockAsync(){const platformOrientationLock=await ExpoScreenOrientation.getPlatformOrientationLockAsync();if(false){return{screenOrientationConstantAndroid:platformOrientationLock};}else if(false){return{screenOrientationArrayIOS:platformOrientationLock};}else if(true){return{screenOrientationLockWeb:platformOrientationLock};}else{return{};}}export async function supportsOrientationLockAsync(orientationLock){if(!ExpoScreenOrientation.supportsOrientationLockAsync){throw new UnavailabilityError('ScreenOrientation','supportsOrientationLockAsync');}const orientationLocks=Object.values(OrientationLock);if(!orientationLocks.includes(orientationLock)){throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);}return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);}export function addOrientationChangeListener(listener){if(typeof listener!=='function'){throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);}const subscription=createDidUpdateDimensionsSubscription(listener);_orientationChangeSubscribers.push(subscription);return subscription;}export function removeOrientationChangeListeners(){let i=_orientationChangeSubscribers.length;while(i--){const subscriber=_orientationChangeSubscribers[i];subscriber.remove();_orientationChangeSubscribers.pop();}}export function removeOrientationChangeListener(subscription){if(!subscription||!subscription.remove){throw new TypeError(`Must pass in a valid subscription`);}subscription.remove();_orientationChangeSubscribers=_orientationChangeSubscribers.filter(sub=>sub!==subscription);}function createDidUpdateDimensionsSubscription(listener){if(true||false){return ExpoScreenOrientation.addListener('expoDidUpdateDimensions',async update=>{listener(update);});}return Dimensions.addEventListener('change',async()=>{const[orientationLock,orientation]=await Promise.all([getOrientationLockAsync(),getOrientationAsync()]);listener({orientationInfo:{orientation},orientationLock});});}","map":{"version":3,"names":["Platform","UnavailabilityError","Dimensions","ExpoScreenOrientation","Orientation","OrientationLock","WebOrientationLock","WebOrientation","SizeClassIOS","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","lockAsync","orientationLock","orientationLocks","Object","values","includes","TypeError","OTHER","lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","isNaN","Array","isArray","orientations","orientation","webOrientationLocks","unlockAsync","DEFAULT","getOrientationAsync","getOrientationLockAsync","getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","addOrientationChangeListener","listener","subscription","createDidUpdateDimensionsSubscription","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub","addListener","update","addEventListener","Promise","all","orientationInfo"],"sources":["/home/orr/GitHub/Dabbetul-Arz/node_modules/expo-screen-orientation/src/ScreenOrientation.ts"],"sourcesContent":["import { Platform, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\nimport { Dimensions } from 'react-native';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  EventSubscription as Subscription,\n};\n\nlet _orientationChangeSubscribers: EventSubscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#orientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#platformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#orientation)\n * value that reflects the current screen orientation.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#orientationlock)\n * value.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo)\n * value.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#orientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#orientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n\n  const subscription = createDidUpdateDimensionsSubscription(listener);\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: EventSubscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n\nfunction createDidUpdateDimensionsSubscription(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (Platform.OS === 'web' || Platform.OS === 'ios') {\n    return ExpoScreenOrientation.addListener(\n      'expoDidUpdateDimensions',\n      async (update: OrientationChangeEvent) => {\n        listener(update);\n      }\n    );\n  }\n\n  // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n  return Dimensions.addEventListener('change', async () => {\n    const [orientationLock, orientation] = await Promise.all([\n      getOrientationLockAsync(),\n      getOrientationAsync(),\n    ]);\n    listener({ orientationInfo: { orientation }, orientationLock });\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
# Правила проекта TypeScript

## Стандарты кодирования
- Использовать строгий режим TypeScript
- Явно объявлять все типы
- Избегать использования типа any

## Разработка компонентов
- Использовать функциональные компоненты
- Определять типы для Props (через interface или type)
- Стилизация компонентов:
  - Вариант 1 (Мобильное приложение с Expo): Использовать StyleSheet от React Native.
  - Вариант 2 (Веб-часть приложения): При необходимости можно использовать CSS-модули.

## Управление состоянием
- Использовать React Context.
- Соблюдать принцип неизменяемости (immutable state)
  
## Оптимизация производительности
- Реализовать разделение кода (code splitting) и ленивую загрузку компонентов
- Использовать React.memo(), useCallback() и useMemo()
- Оптимизировать логику повторных рендеров, особенно в компонентах с мультимедийными функциями.

## Тестирование
- Обеспечить покрытие unit-тестами более 80%
- Использовать React Testing Library для тестирования компонентов
- Писать интеграционные тесты для проверки взаимодействия между компонентами и модулями, особенно для мультимедийных функций (например, плееров).
- Применять TDD (Test-Driven Development) для новых функций, когда это возможно
- Обеспечить, чтобы тесты были однозначными, независимыми и воспроизводимыми.
- Применять Jest для юнит-тестирования, а для e2e тестирования использовать Cypress или другие подходящие инструменты.

## Документирование
- Добавлять комментарии к функциям и компонентам
- Использовать JSDoc для документирования типов и описания функций

## Работа с API
- Использовать Axios для запросов
- Организовывать API-запросы в отдельные сервисы с корректной обработкой ошибок (например, через try-catch или интерсепторы).

## Защита от ошибок
- Разделять бизнес-логику и UI, используя кастомные хуки или Redux.
- Использовать структуру «Ядро и функции» для организации кода.
- Создавать необходимые папки, придерживаясь структуры: /components, /screens, /hooks, /context, /services, /utils.
- Особое внимание уделять обработке ошибок в мультимедийных компонентах (видео, аудио).

## Структура проекта (Навигация и экраны)
- Использовать папку /screens для хранения всех экранов приложения.
- Для вкладок и связанных с ними экранов создавать подпапку /screens/tabs.
- Каждый экран представляет собой отдельный компонент, который отображает контент приложения и управляется навигацией.
- Вкладки — это элемент навигации, позволяющий пользователю переключаться между экранами.
- Особенности ориентации:
  - Все экраны работают в вертикальном режиме по умолчанию.
  - Экран с видео должен поддерживать изменение ориентации в зависимости от положения устройства.

## Структура проекта (Сервисы)
- Использовать папку /services для хранения всех сервисов приложения.
- Каждый сервис представляет собой файл, который отвечает за работу с данными или взаимодействие с внешними ресурсами (например, API, аутентификация, хранилище данных и т. д.).

## Мультимедийные компоненты (Аудио и Видео)
- Использовать только актуальные библиотеки Expo для мультимедийных функций:
  - Видео: использовать expo-video  
  - Аудио: использовать expo-audio  
- Обеспечить корректную обработку ошибок и состояний загрузки в плеерах  
- Тщательно тестировать мультимедийные компоненты на всех поддерживаемых платформах (Android, iOS, веб)  

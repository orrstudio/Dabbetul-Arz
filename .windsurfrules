# Правила проекта

## Основные правила общения
- Говори со мной на русском.

## Правила работы с кодом
- Не вноси никаких изменений в код без моего явного разрешения
- Не вноси никаких изменений в комментарии без моего явного разрешения
- Не импровизируй
- Следуй моим явным указаниям
- При анализе кода анализируй весь код

## Информация об окружении
- Окружение разработки: Arch Linux, Gnome

## Разработка компонентов
- Использовать функциональные компоненты.
- **При необходимости добавлять JSDoc-документацию для Props.**
- **Стилизация**:
  - Вариант 1 (Мобильное приложение с Expo): Использовать StyleSheet от React Native.
  - Вариант 2 (Веб-часть приложения): При необходимости можно использовать CSS-модули.

## Управление состоянием
- Использовать React Context.
- Соблюдать принцип неизменяемости (immutable state).

## Оптимизация производительности
- Реализовать разделение кода (code splitting) и ленивую загрузку компонентов.
- Использовать React.memo(), useCallback() и useMemo().
- Оптимизировать логику повторных рендеров, особенно в компонентах с мультимедийными функциями.

## Тестирование
- Обеспечить покрытие unit-тестами более 80%.
- Использовать React Testing Library для тестирования компонентов.
- Писать интеграционные тесты для проверки взаимодействия между компонентами и модулями, особенно для мультимедийных функций (например, плееров).
- Применять TDD (Test-Driven Development) для новых функций, когда это возможно.
- Обеспечить, чтобы тесты были однозначными, независимыми и воспроизводимыми.
- Применять Jest для юнит-тестирования, а для e2e тестирования использовать Cypress или другие подходящие инструменты.

## Документирование
- Добавлять комментарии к функциям и компонентам.
- **Использовать JSDoc не только для функций, но и для объектов, API-ответов и Props.**

## Работа с API
- Использовать Axios для запросов.
- Организовывать API-запросы в отдельные сервисы с корректной обработкой ошибок (например, через try-catch или интерсепторы).
- **Проверять формат данных, полученных с сервера, так как теперь нет TypeScript.**

## Защита от ошибок
- Разделять бизнес-логику и UI, используя кастомные хуки или Redux.
- Использовать структуру «Ядро и функции» для организации кода.
- Создавать необходимые папки, придерживаясь структуры: /components, /screens, /hooks, /context, /services, /utils.
- **Тщательно проверять данные в runtime, так как теперь нет TypeScript.**
- **При необходимости использовать валидацию данных (`prop-types`, `zod`).**
- Особое внимание уделять обработке ошибок в мультимедийных компонентах (видео, аудио).

## Структура проекта
Весь исходный код приложения (компоненты, экраны, хуки, контексты, утилиты и другие модули) **должен находиться в папке `src`**.

Структура проекта:

 project-root/
 │
 ├── assets/              // Статические файлы: изображения, видео, плейлисты и т.д.
 └── src/
      ├── components/     // Общие компоненты приложения
      ├── screens/        // Все экраны приложения (например, HomeScreen, PlayerScreen, VideoScreen и т.д.)
      ├── hooks/          // Пользовательские хуки
      ├── contexts/       // Контексты (если используются)
      ├── services/       // Сервисы (API, запросы, работа с данными)
      └── utils/          // Утилиты, helper-функции и файлы конфигурации

Каждый экран представляет собой отдельный компонент, находящийся в `src/screens`. Для навигации используйте выбранную библиотеку (например, React Navigation).

## Структура проекта (Сервисы)
- Использовать папку /services для хранения всех сервисов приложения.
- Каждый сервис представляет собой файл, который отвечает за работу с данными или взаимодействие с внешними ресурсами (например, API, аутентификация, хранилище данных и т. д.).

## Мультимедийные компоненты (Аудио и Видео)
- Использовать только актуальные библиотеки Expo для мультимедийных функций:
  - Видео: использовать expo-video  
  - Аудио: использовать expo-audio  
- Обеспечить корректную обработку ошибок и состояний загрузки в плеерах.
- Тщательно тестировать мультимедийные компоненты на всех поддерживаемых платформах (Android, iOS, веб).

# Исправление Ошибок
- Используй файл knowledge-base.md для хранения прошлых ошибок и решений пользователя.
- При обнаружении ошибки в первую очередь проверь файл knowledge-base.md. Если есть запись о похожей ошибке, воспользуйся записанным методом решения.
- Если ошибка новая найдите лучшее решение. После ее устранения запиши ее в файле knowledge-base.md. Формат записи должен быть следующим:
## [Сообщение об ошибке]
Решение: [Описание решения]
